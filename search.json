[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Transmutation Spellbook",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "joy.html",
    "href": "joy.html",
    "title": "2  Joy of Programming",
    "section": "",
    "text": "3 Session 4, 06-10-2023\nfrom wizard import *\ncircle()\nrandom_squares()\ngrid_3(random_squares)\ndef decorate(shape):\n    shape=shape|scale(250/300)\n    return rectangle(w=280, h=280, stroke_width=5)+shape\ndecorate(circle(r=150))\ndef gallery(s1, s2, s3, s4):\n    return grid(decorate(s1), decorate(s2), decorate(s3), decorate(s4))\ndef ellipse_star(n):\n    return ellipse(w=250, h=120)|repeat(n, rotate(180/n))\ndef random_ellipse_star():\n    n= int(random(3, 10))\n    return ellipse_star(n)\ngallery(random_circles(), random_squares(), random_ellipse_star(), grid_1(random_squares))\nint(random(1, 10))\n\n9\ngrid_2(circle)\ncircle?\n\n\nSignature: circle(x=0, y=0, r=100, **kwargs)\nDocstring:\nCreates a circle with center at (x, y) and radius of r.\nExamples:\nDraw a circle.\n    c = circle()\n    show(c)\nDraw a circle with radius 50.\n    c = circle(r=50)\n    show(c)\nDraw a circle with center at (10, 20) and a radius of 50.\n    c = circle(x=10, y=20, r=50)\n    show(c)\nFile:      c:\\users\\nandu\\documents\\github\\joy-notes\\joy.py\nType:      function\nellipse_star?\n\n\nSignature: ellipse_star(n)\nDocstring: &lt;no docstring&gt;\nFile:      c:\\users\\nandu\\appdata\\local\\temp\\ipykernel_17068\\2975163437.py\nType:      function\nsquare?\n\n\nSignature: square(w)\nDocstring:\nCreates a rectangle with a given width, and height equal to the given width.\nExample:\nsquare(100)\nGives a rectangle with width=100, and height equal to width that is, equal to 100.\nFile:      c:\\users\\nandu\\documents\\github\\joy-notes\\wizard.py\nType:      function\nnumbers = [1, 2, 3, 4, 5]\nnumbers.append(6)\nnumbers\n\n[1, 2, 3, 4, 5, 6]\ndef squares(numbers):\n    result = []\n    for n in numbers:\n        result.append(n*n)\n    return result\nsquares([19, 8, 16])\n\n[361, 64, 256]\ndef new_squares(numbers):\n    return [n*n for n in numbers]\nnew_squares([65, 20, 34])\n\n[4225, 400, 1156]\nsum(new_squares(range(5)))\n\n30\nsum(new_squares(range(1000000)))\n\n333332833333500000\n[n*n for n in range(10) if n%2==0]\n\n[0, 4, 16, 36, 64]\nsum([n*n for n in range(1000000) if n%2==0])\n\n166666166667000000\n[n for n in range(100) if n%5==0]\n\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\nlist(range(0, 100, 5))\n\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\nimport math\nstep = 4.5\nn=math.ceil(100/step)\nn\n\n23\n[i*step for i in range(n)]\n\n[0.0,\n 4.5,\n 9.0,\n 13.5,\n 18.0,\n 22.5,\n 27.0,\n 31.5,\n 36.0,\n 40.5,\n 45.0,\n 49.5,\n 54.0,\n 58.5,\n 63.0,\n 67.5,\n 72.0,\n 76.5,\n 81.0,\n 85.5,\n 90.0,\n 94.5,\n 99.0]\nmath.ceil(22.22)\n\n23\nmath.floor(22.22)\n\n22\nfish = Shape(\"path\", fill=\"black\", d=\"M -4.2207441,256.03034 C -28.145511,234.64868 -48.352478,216.63385 -64.254835,194.25807 c 0,-0.98162 1.409231,-4.58443 3.131624,-8.00625 9.780189,-19.42994 18.510553,-32.02794 40.347284,-58.22148 l 11.6713579,-14 -0.5810892,-5.95367 C -12.866405,70.238313 -11.000232,42.188243 -1.6245701,6.280326 -0.44826504,-4.552565 2.1569119,1.0296139 16.04983,11.409158 31.80326,24.108892 46.438782,31.394353 61.228466,55.314218 l 18.47934,0.80424 c 21.018664,0.914754 29.546174,2.279685 41.537354,6.120755 l 9,2.88293 c 0.0945,11.792891 0.18906,23.585782 0.28359,35.378677 0.0814,10.15961 0.16287,20.31922 0.24431,30.47883 -10.50136,10.51677 -21.58698,23.07846 -32.08834,33.59523 14.06059,22.8839 52.10904,35.64861 85.22757,39.00203 l 13.66713,1.22844 9.56869,11.23743 c 10.78341,12.66401 17.40255,18.3707 36.09705,31.12106 l 13,8.8665 c 1.33842,0.7382 8.30977,4.88574 -1.5,3.88201 l -19.25,-3.68746 c -26.32015,-5.0418 -38.48678,-6.65619 -50.25,-6.66768 -9.38398,-0.009 -27.96557,1.23366 -37.02773,2.47659 -3.87372,0.5313 -4.40901,0.2337 -14,-7.78357 -29.85673,-24.95774 -39.871065,-32.158 -58.505535,-42.06515 l -10.53326,-5.60009 c -20.811164,20.81902 -41.622317,41.63804 -62.4334701,62.45707 -2.21316496,3.12868 -6.965909,-3.01172 -6.965909,-3.01172 z M 61.803945,194.95944 C 50.531083,188.98956 40.40126,183.25734 27.305528,175.34765 l -6.754753,6.47832 c -3.536929,3.39218 -10.53586,8.30385 -14.4839431,12.21821 -6.31395894,6.26003 -7.939397,8.70463 -13.498717,20.30159 -5.7692039,12.03478 -8.8304989,16.00434 -8.8182649,11.43457 0.008,-3.00548 11.4878289,-25.49609 15.74548296,-30.84775 C 1.7259409,192.12882 8.372517,186.3979 14.097255,181.97548 l 10.741024,-8.29756 c -4.207436,-3.82316 -8.004154,-7.27638 -11.339194,-10.98081 -1.24991,-0.5529 -17.0361021,12.2674 -22.5955641,18.35034 -2.8578029,3.12689 -8.6443609,11.26473 -12.8590179,18.08407 -7.041702,11.39353 -10.299338,14.82367 -10.299338,10.84471 0,-2.03202 11.995257,-21.24309 18.142644,-29.05646 2.644213,-3.36081 8.4833679,-8.98581 12.9758999,-12.5 4.492532,-3.51418 11.4432581,-8.3652 12.5847181,-9.26519 C 1.4377364,142.53161 -1.7064185,131.95557 -7.8508061,118.29212 l -14.0058249,17.06987 c -18.407479,22.43447 -23.802822,30.06405 -32.294897,45.66835 l -7.074778,13 c 5.999036,4.93102 41.372597,48.14728 61.97156998,61.5 C 22.561403,234.48013 38.760552,218.01213 61.803945,194.95944 z M -7.2548351,242.51953 C 3.2541256,226.12534 26.190195,194.2622 40.413595,185.53034 c -9.194645,15.38335 -30.067556,33.10097 -41.24502108,52.79312 -1.78332402,3.17503 -3.60588202,5.20524 -4.67340902,5.20586 -0.9625,5.6e-4 -1.75,-0.45384 -1.75,-1.00979 z M -45.254835,197.45001 c 0,-2.02853 11.205169,-22.9919 14.961761,-27.99146 6.316815,-7.86762 33.3296708,-35.18953 34.2312897,-27.04427 -16.6533327,10.47874 -36.2675407,32.23172 -43.0855567,49.86606 -1.733518,3.45456 -3.800751,6.25 -4.621889,6.25 -0.817083,0 -1.485605,-0.48615 -1.485605,-1.08033 z m 281.223395,49.32353 c -16.53242,-11.55112 -26.48235,-20.87994 -37.90361,-35.53751 -2.12475,-2.72682 -2.61988,-2.84067 -20.49857,-4.71335 -41.29693,-3.67905 -79.727773,-25.41347 -90.359285,-56.99234 -19.418393,-48.4311 -8.034463,-84.647267 -52.96193,-120.882837 -3.85,-3.16484 -12.6884,-9.65735 -19.6409,-14.4278 L 1.9633729,5.546172 C -9.641588,46.319455 -11.246694,88.443563 -3.8678647,116.69064 c 4.9485443,18.94364 13.9120427,37.55338 27.6414417,49.58108 20.120295,17.62647 74.865213,36.73222 121.471583,82.30002 l 5.5,-0.51387 c 35.04438,-3.27426 45.67213,-2.87049 76,2.88739 9.625,1.82735 18.13568,3.38155 18.91262,3.45377 0.77694,0.0722 -3.58321,-3.35925 -9.68922,-7.62549 z m -57.7234,-17.58865 C 114.84075,203.60146 97.505663,195.44895 80.066053,177.92482 57.002968,150.78367 43.835211,120.86796 30.637475,88.018981 c -6.662998,-24.866011 4.774135,2.895003 8.281419,11.775776 8.22961,20.553433 17.512392,34.863533 24.628245,47.993013 20.033752,36.96433 47.128131,51.04988 125.448021,81.72205 13.00195,5.09191 20.75,8.77958 20.75,9.64164 0,0.75839 -0.7875,1.36818 -1.75,1.3551 -0.9625,-0.0131 -14.35,-5.10783 -29.75,-11.32167 z M 4.4664931,85.774195 C 3.8384406,80.865818 2.1039515,45.709369 8.8642806,44.240948 c 1.5155094,-0.253205 3.1525274,2.067688 4.6947584,5.369471 2.976272,6.371935 5.599528,16.397006 6.315175,18.624249 l 2.10273,8.577367 C 14.495321,81.740921 8.8564089,88.629661 6.7080086,88.3433 5.533146,88.475127 4.8579884,87.595736 4.4664931,85.774195 z M 6.8906482,84.102279 C 10.86679,80.232388 16.962726,77.10653 19.148649,75.152542 14.409646,54.995888 10.892524,47.229403 9.2075279,48.095515 6.4848717,58.109433 6.2541696,70.750092 6.8906482,84.102279 z M 22.664175,38.938253 c 2.772591,-2.483362 26.930795,19.823141 26.930795,22.472621 0,0.544116 -4.38678,3.089995 -9.230553,5.341842 -3.531321,1.641695 -8.558047,4.018164 -9.380188,4.018164 -2.412811,-2.264133 -9.47291,-30.407563 -8.320054,-31.832627 z m 3.300748,4.243751 c -1.891754,-1.32108 3.510607,18.073228 5.716434,24.267649 8.013578,-2.283375 14.353163,-6.99971 14.253502,-7.312251 C 40.984785,54.946039 29.523328,44.769161 25.964923,43.182004 z m 62.865352,88.348336 c -2.49329,0 -0.721904,-3.04198 4.88639,-8.3914 2.278533,-2.17336 4.28533,-3.88722 6.244053,-5.23383 4.996562,-3.4351 9.680292,-4.48041 17.763912,-4.66701 l 9.00008,-0.20776 c -0.0614,-4.14133 0.34883,-9.82321 -0.75824,-13.136793 -0.42827,0.264693 -5.54093,-1.408851 -9.10016,-2.171765 -10.50631,-2.25198 -13.47316,-1.200361 -21.662504,2.724298 -7.83663,3.75561 -9.458661,4.83971 -9.458661,2.78448 0,-0.71487 3.65458,-3.07737 8.1213,-5.250017 7.348095,-3.57414 8.799985,-3.9334 15.249995,-3.77359 3.92078,0.0971 9.43266,1.079694 12.3787,1.60352 l 5.83426,1.037372 c 0.0748,-1.197325 0.20337,-3.375755 0.30518,-5.687864 0.15696,-3.564397 0.25022,-7.446495 -0.0157,-8.541485 -8.45958,-3.945156 -18.33598,-7.165029 -26.14755,-7.281232 -8.302223,-0.123502 -15.834295,0.03183 -21.977331,2.568846 -2.732244,1.128391 -4.259138,3.003355 -6.387368,5.259062 3.477717,14.490596 12.237245,68.186238 23.552176,78.582448 9.898943,-9.88246 20.187423,-21.80983 30.086383,-31.69227 1.92823,-6.78475 0.64872,-13.84968 -0.47808,-14.03878 -19.55293,-4.48221 -31.455088,8.48165 -37.436805,15.51377 z m 37.914885,-63.682657 -5.3846,-1.904158 -10.02638,-3.54563 C 106.6178,60.73004 102.11572,59.915418 97.181611,59.40953 91.454934,58.822382 85.146286,58.651119 77.245165,58.044453 72.845164,57.706611 63.85389,57.609461 62.62028,57.352487 c 1.249729,2.634372 2.75999,5.563313 4.220937,8.583427 2.242502,4.635769 4.368816,9.486354 5.258373,13.816167 6.91308,-4.693346 13.461538,-6.044705 19.713742,-6.578177 7.392558,-0.657693 16.135208,0.882942 22.955088,2.544154 5.87105,1.430094 10.31713,2.949548 11.25016,3.232765 1.13687,0.345092 1.29474,-1.221868 1.18082,-3.550245 -0.10603,-2.167253 -0.44755,-4.994189 -0.45424,-7.552895 z m 12.64676,114.545847 c -2.90282,-0.74731 -6.91418,-3.14668 -10.30114,-6.06993 -1.91717,-1.65469 -3.63427,-3.47725 -4.83701,-5.26305 -1.01961,-1.51389 -1.66956,-3.00137 -1.75838,-4.33778 -0.27291,-3.21807 4.23116,3.9643 7.47286,7.26654 1.06762,1.13916 2.53717,2.1524 4.11935,3.08677 3.08048,1.81922 6.58789,3.33942 8.38683,4.90772 -0.069,0.73412 -1.15751,1.23822 -3.08251,0.40973 z m -1.57762,-18.53569 c -1.06389,-0.64878 -1.93526,-1.10287 -2.83379,-2.28729 -1.06757,-1.40726 -1.97908,-3.0679 -2.64102,-4.68559 -1.45362,-3.55248 -2.39222,-6.76012 -0.44843,-6.76012 0.4823,0 1.29583,1.99069 2.05446,3.94922 0.51683,1.33427 1.00818,2.65362 1.35198,3.31844 0.84844,1.64069 2.88499,3.67725 4.52568,4.52568 0.77517,3.93209 -1.33538,2.36354 -2.00888,1.93966 z\")\nfish = fish | translate(x=-130, y=-130) | scale(y=-1)\nfish = fish | scale(300/260)\nfish\nfish|scale(0.5)\ndef rot(s):\n    return s|rotate(90)\nrot(fish)\nfish+rot(rot(fish))|scale(0.5)\nfish2 = fish|rotate(45)|scale(1/SQRT2)|translate(y=150)|scale(x=-1)\nu = fish2 + rot(fish2) + rot(rot(fish2)) + rot(rot(rot(fish2)))\nu|scale(0.5)\nfish3 = rot(rot(rot(fish2)))\nt = fish+fish2+fish3\nt|scale(0.5)\nquartet = grid\nquartet(u, u, u, u)\nu2 = quartet(u, u, u, u)\nu3 = quartet(u2, u2, u2, u2)\nu3\nquartet(u3, u3, u3, u3)\nblank = circle(r=0)\ndef cycle(shape):\n    # return quartet(shape, rot(shape), rot(rot(shape)), rot(rot(rot(shape))))\n    return quartet(shape, rot(rot(rot(shape))),\n                   rot(shape), rot(rot(shape)))\ncycle(rot(t))\nside1 = quartet(blank, blank, rot(t), t)\nside2 = quartet(side1, side1, rot(t), t)\nside1+side2\nside3 = quartet(side2, side2, rot(t), t)\nside3\ndef fish_side(n):\n    if n==0:\n        return blank\n    else:\n        prev = fish_side(n-1)\n        return quartet(prev, prev, rot(t), t)\nfish_side(5)\ncorner1 = quartet(blank, blank, blank, u)\ncorner1\ncorner2 = quartet(corner1, side1, rot(side1), u)\ncorner2\ncorner3 = quartet(corner2, side2, rot(side2), u)\ncorner3\ndef fish_corner(n):\n    if n==0:\n        return blank\n    else:\n        prev = fish_corner(n-1)\n        side = fish_side(n-1)\n        return quartet(prev, side, rot(side), u)\nfish_corner(4)\ndef beside3(a, b, c):\n    a1 = a | scale(x=1/3) | translate(x=-100)\n    b1 = b | scale(x=1/3) \n    c1 = c | scale(x=1/3) | translate(x=100)\n    return a1+b1+c1\n\ndef below3(a, b, c):\n    a1 = a | scale(y=1/3) | translate(y=100)\n    b1 = b | scale(y=1/3) \n    c1 = c | scale(y=1/3) | translate(y=-100)\n    return a1+b1+c1\n\ndef nonet(\n    p, q, r, \n    s, t, u,\n    v, w, x):\n    return below3(\n        beside3(p, q, r),\n        beside3(s, t, u),\n        beside3(v, w, x))\nside2 = fish_side(2)\ncorner2 = fish_corner(2)\n_ = blank\n\nnonet(\n    corner2, side2, rot(rot(rot(corner2))),\n    rot(side2), u, rot(rot(rot(side2))),\n    rot(corner2), rot(rot(side2)), rot(rot(corner2)))\ndef square_limit(n):\n    side = fish_side(n)\n    corner = fish_corner(n)\n    _ = blank\n    \n    return nonet(\n        corner, side, rot(rot(rot(corner))),\n        rot(side), u, rot(rot(rot(side))),\n        rot(corner), rot(rot(side)), rot(rot(corner)))\nsquare_limit(4)"
  },
  {
    "objectID": "joy.html#joy",
    "href": "joy.html#joy",
    "title": "2  Joy of Programming",
    "section": "2.1 Joy",
    "text": "2.1 Joy\nJoy supports working with Jupyter notebooks. Is displays a shape automatically, without having to call the show function.\n\ncircle()\n\n\n\n\n\ncircle(r=25, x=100) | repeat(200, rotate(10)|scale(0.985))"
  },
  {
    "objectID": "joy.html#interactive-widgets",
    "href": "joy.html#interactive-widgets",
    "title": "2  Joy of Programming",
    "section": "2.2 Interactive Widgets",
    "text": "2.2 Interactive Widgets\nJupyter supports interactive widgets that allow adding a slider to change values and see the updated image in real-time.\nLet’s start with a simple example of star and see if we can make it interactive.\n\ndef star(n):\n    angle = 180/n\n    return line() | repeat(n, rotate(angle))\n\n\nstar(5)\n\n\n\n\nLet’s make it interactive using the interactive function. Notice that we have specified the value of n as an IntSlider.\n\ninteract(star, n=IntSlider(value=5, min=1, max=30))\n\n\n\n\n&lt;function __main__.star(n)&gt;\n\n\nInteractive widgets makes it easy to discover the correct value of scale or angle when making complex shapes.\n\ndef spiral(scale_factor):\n    return circle(r=25, x=100) | repeat(200, rotate(10)|scale(scale_factor))\n\n\nspiral(0.95)\n\n\n\n\n\ninteract(spiral, \n         scale_factor=FloatSlider(value=0.9, min=0.8, max=1.0, step=0.001, readout_format=\"0.3f\"))\n\n\n\n\n&lt;function __main__.spiral(scale_factor)&gt;\n\n\nTry doing the interactive widget for drawing a magic squares.\n\nrectangle(w=250, h=250) | repeat(200, rotate(10)|scale(0.8))\n\n\n\n\nCan you convert that into an interactive widget?\n\ndef magic_squares(scale_factor):\n    return rectangle(w=250, h=250)|repeat(200, rotate(10)|scale(scale_factor))\n\n\ninteract(magic_squares,\n         scale_factor = FloatSlider(value=0.9, min=0.1, max=1.0, step=0.01))\n\n\n\n\n&lt;function __main__.magic_squares(scale_factor)&gt;\n\n\n\ndef magic_ellipse(scale_factor, n, s):\n    return ellipse(w=150, h=300)|scale(s)|repeat(n, rotate(10)|scale(scale_factor))\n\n\ninteract(magic_ellipse, \n         scale_factor=FloatSlider(value=0.9, min=0.6, max=1.0, step=0.01),\n        n=IntSlider(value=100, min=1, max=150),\n        s=FloatSlider(value=0.20, min=0.01, max=1.00, step=0.01),)\n\n\n\n\n&lt;function __main__.magic_ellipse(scale_factor, n, s)&gt;\n\n\n\nnames = [\"Alice\", \"Bob\", \"Carol\", \"Dave\"]\n\n\nfor name in names:\n    print(\"Hello\", name)\n\nHello Alice\nHello Bob\nHello Carol\nHello Dave\n\n\n\nnames.append(\"Elly\")\n\n\nnames\n\n['Alice', 'Bob', 'Carol', 'Dave', 'Elly']\n\n\n\nnumbers = [1, 2, 3, 4, 5]\n\n\nresult = []\nfor n in numbers:\n    result.append(n*n)\n\n\nresult\n\n[1, 4, 9, 16, 25]\n\n\n\n[n*n for n in numbers]\n\n[1, 4, 9, 16, 25]\n\n\n\ncircles = [circle(r=r) for r in range(10, 100, 10)]\n\n\ncombine(circles)\n\n\n\n\n\nrandom(42)\n\n26.29067461722437\n\n\n\ndef random_circles(r, n):\n    shapes = [circle(r=random(r)) for i in range(n)]\n    return combine(shapes)\n\n\nrandom_circles(150, 30)"
  },
  {
    "objectID": "joy.html#concentric-circles",
    "href": "joy.html#concentric-circles",
    "title": "2  Joy of Programming",
    "section": "4.1 Concentric Circles",
    "text": "4.1 Concentric Circles\n\nradius = 100\nn=4\n\n\ncircle(r=100)+circle(r=90)+circle(r=80)+circle(r=70)\n\n\n\n\n\ncircle(r=100)+circle(r=75)+circle(r=50)+circle(r=25)\n\n\n\n\n\ncircle(r=100)+circle(r=80)+circle(r=60)+circle(r=40)+circle(r=20)\n\n\n\n\n\nradius = 100\nn=4\n\ndelta = radius/n\n\n\ndelta\n\n25.0\n\n\n\n[i*delta for i in range(1, n+1)]\n\n[25.0, 50.0, 75.0, 100.0]\n\n\n\ncircles = [circle(r = i*delta) for i in range(1, n+1)]\n\n\ncircles\n\n[&lt;circle {'cx': 0, 'cy': 0, 'r': 25.0}&gt;,\n &lt;circle {'cx': 0, 'cy': 0, 'r': 50.0}&gt;,\n &lt;circle {'cx': 0, 'cy': 0, 'r': 75.0}&gt;,\n &lt;circle {'cx': 0, 'cy': 0, 'r': 100.0}&gt;]\n\n\n\ncircles[3]\n\n\n\n\n\ncombine(circles)\n\n\n\n\n\ndef concentric_circles(radius, n):\n    delta = radius/n\n    circles = [circle(r=i*delta) for i in range(1, n+1)]\n    return combine(circles)\n\n\nconcentric_circles(100, 5)\n\n\n\n\n\nconcentric_circles(10, 5)\n\n\n\n\n\nconcentric_circles(100, 20)"
  },
  {
    "objectID": "joy.html#a-row-of-shapes",
    "href": "joy.html#a-row-of-shapes",
    "title": "2  Joy of Programming",
    "section": "4.2 A Row of Shapes",
    "text": "4.2 A Row of Shapes\n\ns1=circle()\ns2=rectangle()\n\n\ns1+s2\n\n\n\n\n\na=s1|scale(0.5)|translate(x=-100)\n\nb=s2|scale(0.5)|translate(x=100)\n\na+b\n\n\n\n\n\ns1=concentric_circles(150, 1)\ns2=concentric_circles(150, 2)\ns3=concentric_circles(150, 3)\ns4=concentric_circles(150, 4)\n\n\na=s1|scale(1/3)|translate(x=-100)\nb=s2|scale(1/3)\nc=s3|scale(1/3)|translate(x=100)\n\na+b+c\n\n\n\n\n\ndx = 300/4\na=s1|scale(1/4)|translate(x=0)\nb=s2|scale(1/4)|translate(x=dx)\nc=s3|scale(1/4)|translate(x=2*dx)\nd=s4|scale(1/4)|translate(x=3*dx)\n\nshape = a+b+c+d\n\nshape|translate(x=-150+dx/2)\n\n\n\n\n\ndef row(shapes):\n    n=len(shapes)\n    dx=300/n\n    offset=-150 + dx/2\n    new_shapes=[shapes[i]|scale(1/n)|translate(x=dx*i) for i in range(n)]\n    return combine(new_shapes)|translate(x=offset)\n\n\nrow([s1, s2])\n\n\n\n\n\nrow([concentric_circles(150, 10), concentric_circles(150, 4)])\n\n\n\n\n\nrow([concentric_circles(150, 1),\n     concentric_circles(150, 2),\n     concentric_circles(150, 3),\n     concentric_circles(150, 4), \n     concentric_circles(150, 5)])\n\n\n\n\n\ndef row_of_concentric_circles(n):\n    shapes=[concentric_circles(150, n-i) for i in range(n)]\n    return row(shapes)\n\n\nrow_of_concentric_circles(5)\n\n\n\n\n\n[i+1 for i in range(5)]\n\n[1, 2, 3, 4, 5]\n\n\n\n[5-i for i in range(5)]\n\n[5, 4, 3, 2, 1]"
  },
  {
    "objectID": "joy.html#session-7-27-10-2023",
    "href": "joy.html#session-7-27-10-2023",
    "title": "2  Joy of Programming",
    "section": "4.3 Session 7 27-10-2023",
    "text": "4.3 Session 7 27-10-2023\n\ndef circle_grid(n):\n    size = 300/n\n    r = size/2\n    x = -150+r\n    y = -150+r\n    shapes = []\n    for j in range(n):\n        for i in range(n):\n            c = circle(x, y, r)\n            shapes.append(c)\n            x = x+size\n        y = y+size\n        x = -150+r\n    return combine(shapes)\n\n\ncircle_grid(9)"
  },
  {
    "objectID": "joy.html#session-8-10-11-2023",
    "href": "joy.html#session-8-10-11-2023",
    "title": "2  Joy of Programming",
    "section": "4.4 Session 8: 10-11-2023",
    "text": "4.4 Session 8: 10-11-2023\nc*c = a*a + b*b\n\\(c*c = a*a + b*b\\)\n\\(c^2 = a^2 + b^2\\)\n\\(\\sum_{i=1}^n a_i^2\\)\n\\(\\sqrt{\\sum_{i=1}^n (A_i-B_i)^2}\\)\n\ndef circle_grid(n):\n    size = 300/n\n    r = size/2\n    x = -150+r\n    y = -150+r\n    shapes = []\n    for j in range(n):\n        for i in range(n):\n            c = circle(x, y, r)\n            shapes.append(c)\n            x = x+size\n        y = y+size\n        x = -150+r\n    return combine(shapes)\n\n\ncircle_grid(4)\n\n\n\n\n\ndef donut(x, y, r):\n    a = circle(x=x, y=y, r=r)\n    b = circle(x=x, y=y, r=r/2)\n    return a+b\n\n\ndonut(50, 60, 35)\n\n\n\n\n\ndef donut_grid(n):\n    size = 300/n\n    r = size/2\n    x = -150+r\n    y = -150+r\n    shapes = []\n    for j in range(n):\n        for i in range(n):\n            c = donut(x, y, r)\n            shapes.append(c)\n            x = x+size\n        y = y+size\n        x = -150+r\n    return combine(shapes)\n\n\ndonut_grid(10)\n\n\n\n\n\nfrom wizard import *\n\n\n4.4.1 This is a grid of random concentric squares\n\ndef random_squares_grid(n):\n    size = 300/n\n    r = size/2\n    x = -150+r\n    y = -150+r\n    shapes = []\n    for j in range(n):\n        for i in range(n):\n            c = random_squares(w=size, n=10)|translate(x=x, y=y)\n            shapes.append(c)\n            x = x+size\n        y = y+size\n        x = -150+r\n    return combine(shapes)\n\n\nrandom_squares_grid(5)\n\n\n\n\n\ndef super_grid(shape_maker, n):\n    size = 300/n\n    r = size/2\n    x = -150+r\n    y = -150+r\n    shapes = []\n    for j in range(n):\n        for i in range(n):\n            c = shape_maker(size)|translate(x=x, y=y)\n            shapes.append(c)\n            x = x+size\n        y = y+size\n        x = -150+r\n    return combine(shapes)\n\n\ndef make_circle(size):\n    r = size/2\n    return circle(r=r)\n\n\nmake_circle(50)\n\n\n\n\n\nsuper_grid(make_circle, 6)\n\n\n\n\n\nconbottomic_circles(r=45, n=6)\n\n\n\n\n\ndef make_conbottomic_circles(size):\n    r = size/2\n    return conbottomic_circles(r=r, n=5)\n\n\nmake_conbottomic_circles(90)\n\n\n\n\n\nsuper_grid(make_conbottomic_circles, 10)\n\n\n\n\n\ndef make_random_squares(size):\n    return random_squares(w=size*2, n=6)|scale(0.5)\n\n\nsuper_grid(make_random_squares, 14)\n\n\n\n\n\ndef make_donut(size):\n    return donut(x=0, y=0, r=size/2)\n\n\nmake_donut(60)\n\n\n\n\n\nsuper_grid(make_donut, 16)"
  },
  {
    "objectID": "joy.html#super_grid-v2",
    "href": "joy.html#super_grid-v2",
    "title": "2  Joy of Programming",
    "section": "4.5 Super_Grid v2",
    "text": "4.5 Super_Grid v2\n\ndef super_grid_v2(shape_maker, n):\n    size = 300/n\n    r = size/2\n    x = -150+r\n    y = -150+r\n    shapes = []\n    for j in range(n):\n        for i in range(n):\n            c = shape_maker(size, row=j, column=i, n=n)|translate(x=x, y=y)\n            shapes.append(c)\n            x = x+size\n        y = y+size\n        x = -150+r\n    return combine(shapes)\n\n\ndef make_circles(size, row, column, n):\n    #print(f\"make_circles size={size} row={row} column={column}\")\n    return concentric_circles(radius = size/2, n=row+column+1)\n\n\nsuper_grid_v2(make_circles, 6)\n\n\n\n\n\ndef make_circles(size, row, column, n):\n    #print(f\"make_circles size={size} row={row} column={column}\")\n    return concentric_circles(radius = size/2, n=abs(column-row)+1)\n\n\nsuper_grid_v2(make_circles, 6)\n\n\n\n\n\ndef make_circles(size, row, column, n):\n    #print(f\"make_circles size={size} row={row} column={column}\")\n    return concentric_circles(radius = size/2, n=min(column, row)+1)\n\n\nsuper_grid_v2(make_circles, 6)"
  },
  {
    "objectID": "joy.html#session-9---24-11-2023",
    "href": "joy.html#session-9---24-11-2023",
    "title": "2  Joy of Programming",
    "section": "4.6 Session 9 - 24-11-2023",
    "text": "4.6 Session 9 - 24-11-2023\n\ndef factorial(n):\n    if n&gt;1:\n        return n*factorial(n-1)\n    else:\n        return 1\n\n\nfactorial(10)\n\n3628800\n\n\n\nfrom joy import *\n\ndef mega_circle_bowl(r, n):\n    c1=circle(r=r)\n    if n&gt;1:\n        c2=mega_circle_bowl(r=r/3, n=n-1)\n        c3=mega_circle_bowl(r=r/3, n=n-1)|translate(y=r/1.5)|repeat(6, rotate(60))\n        return c1+c2+c3\n    else:\n        return c1\n\n\nmega_circle_bowl(150, 5)"
  },
  {
    "objectID": "hw03.html#problem-1-square-in-square",
    "href": "hw03.html#problem-1-square-in-square",
    "title": "3  Home Work - 03",
    "section": "3.1 Problem 1: Square in square",
    "text": "3.1 Problem 1: Square in square\nWrite Python code to draw the following image.\nPlease note that there are a total of 6 squares in this image. What scaling factor would you use and why?\n\n\nrectangle(w=300, h=300) | repeat(6, scale(0.7)| rotate(45))"
  },
  {
    "objectID": "hw03.html#problem-2-star",
    "href": "hw03.html#problem-2-star",
    "title": "3  Home Work - 03",
    "section": "3.2 Problem 2: Star",
    "text": "3.2 Problem 2: Star\nWrite a function star that takes a number n as argument and creates a start using n ellipses as shown below.\n\n\n\n\n\n\n\nstar(2)\n\n\n\n\n\n\n\nstar(3)\n\n\n\n\n\n\n\nstar(4)\n\n\n\n\n\n\n\ndef ellipse_star(n):\n    return ellipse(w=150, h=75)|repeat(n, rotate(180/n))\n\n\nellipse_star(4)"
  },
  {
    "objectID": "hw03.html#problem-3-interactive-star",
    "href": "hw03.html#problem-3-interactive-star",
    "title": "3  Home Work - 03",
    "section": "3.3 Problem 3: Interactive Star",
    "text": "3.3 Problem 3: Interactive Star\nMake the star function interatve by adding a slider to change the value of n from 1 to 10.\n\ninteract(ellipse_star, n=IntSlider(value=4, min=1, max=10, step=1))\n\n\n\n\n&lt;function __main__.ellipse_star(n)&gt;"
  },
  {
    "objectID": "hw03.html#problem-4-random-circles-in-grid",
    "href": "hw03.html#problem-4-random-circles-in-grid",
    "title": "3  Home Work - 03",
    "section": "3.4 Problem 4: Random Circles in Grid",
    "text": "3.4 Problem 4: Random Circles in Grid\nWrite a function random_circles to create a shape with many random concentric circles and use that to put it in a grid. You can use the beside, below and grid function defined in the last class. They are included below for your convenience.\n\n\ndef beside(s1, s2):\n    s1 = s1 | scale(x=0.5) | translate(x=-75)\n    s2 = s2 | scale(x=0.5) | translate(x=75)    \n    return s1+s2\n\ndef below(s1, s2):\n    s1 = s1 | scale(y=0.5) | translate(y=75)\n    s2 = s2 | scale(y=0.5) | translate(y=-75)    \n    return s1+s2\n\ndef grid(s1, s2, s3, s4):\n    return below(\n        beside(s1, s2),\n        beside(s3, s4))\n\n\ndef random_circles(r, n):\n    shapes = [circle(r=random(r)) for i in range(n)]\n    return combine(shapes)\n\n\ndef repeat4(shape):\n    return grid(shape, shape, shape, shape)\n\n\ngrid(random_circles(100, 25), random_circles(100, 25), random_circles(100, 25), random_circles(100, 25))"
  },
  {
    "objectID": "hw03.html#problem-5-more-concentric-circles-in-a-grid",
    "href": "hw03.html#problem-5-more-concentric-circles-in-a-grid",
    "title": "3  Home Work - 03",
    "section": "3.5 Problem 5: More Concentric Circles in a Grid",
    "text": "3.5 Problem 5: More Concentric Circles in a Grid\nWhat does it take to put many more concentric circles in a large grid? Will you be able to put 64 of them in an 8x8 grid as shown below?\n\n\nrepeat4(repeat4(repeat4(random_circles(150, 105))))\n\n\n\n\n\ndef random_circles_2():\n    return random_circles(r=125, n=10)\n\n\nrandom_circles_2()\n\n\n\n\n\ndef random_circle_grid():\n    return grid(random_circles_2(), random_circles_2(), random_circles_2(), random_circles_2())\n\n\nrandom_circle_grid()\n\n\n\n\n\ndef random_circle_megagrid():\n    return grid(random_circle_grid(), random_circle_grid(), random_circle_grid(), random_circle_grid())\n\n\nrandom_circle_megagrid()\n\n\n\n\n\ndef random_circle_supergrid():\n    return grid(random_circle_megagrid(), random_circle_megagrid(), random_circle_megagrid(), random_circle_megagrid())\n\n\nrandom_circle_supergrid()\n\n\n\n\n\nx=1\n\n\ny=x\n\n\ny\n\n1\n\n\n\nrandom_circles_2()\n\n\n\n\n\nf=random_circles_2\nf\n\n&lt;function __main__.random_circles_2()&gt;\n\n\n\nf()\n\n\n\n\n\ndef grid_1(shape_maker):\n    return grid(shape_maker(), shape_maker(), shape_maker(), shape_maker())\n\n\ngrid_1(random_circles_2)\n\n\n\n\n\ndef square(w):\n    return rectangle(w=w, h=w)\n\ndef random_squares(w=250, n=15):\n    shapes = [square(w=random(w)) for i in range(n)]\n    return combine(shapes)\n\n\nrandom_squares()\n\n\n\n\n\ngrid_1(random_squares)\n\n\n\n\n\ndef grid_2(shape_maker):\n    def grid_maker():\n        return grid_1(shape_maker)\n    return grid_1(grid_maker)\n\n\ngrid_2(random_circles_2)\n\n\n\n\n\ngrid_2(random_squares)\n\n\n\n\n\ndef grid_3(shape_maker):\n    def grid_maker():\n        return grid_1(shape_maker)\n    return grid_2(grid_maker)\n\n\ngrid_3(random_squares)"
  },
  {
    "objectID": "hw04.html#problem-1-random-concentric-circles-in-a-6x6-grid",
    "href": "hw04.html#problem-1-random-concentric-circles-in-a-6x6-grid",
    "title": "4  Home Work - 04",
    "section": "4.1 Problem 1: Random Concentric Circles in a 6x6 Grid",
    "text": "4.1 Problem 1: Random Concentric Circles in a 6x6 Grid\nArrange random concentric circles in a 6x6 grid as shown in the image below.\n\n\ndef circle_row(n):\n    return circle(x=-125, y=125, r=(25))|repeat(n, translate(x=50))\n\n\ncircle_row(6)|repeat(6, translate(y=-50))"
  },
  {
    "objectID": "hw04.html#problem-2-random-concentric-squares-in-a-6x6-grid",
    "href": "hw04.html#problem-2-random-concentric-squares-in-a-6x6-grid",
    "title": "4  Home Work - 04",
    "section": "4.2 Problem 2: : Random Concentric Squares in a 6x6 Grid",
    "text": "4.2 Problem 2: : Random Concentric Squares in a 6x6 Grid\nCan you make the solution to the above problem generic enough that it could be used to make a 6x6 grid of random concentric squares as shown in the image below.\n\n\ndef square_row():\n    return rectangle(w=45, h=45, x=-125, y=125)|repeat(6, translate(x=50))\n\n\nsquare_row()\n\n\n\n\n\nsquare_row()|repeat(6, translate(y=-50))"
  },
  {
    "objectID": "hw04.html#problem-3-concentric-circles",
    "href": "hw04.html#problem-3-concentric-circles",
    "title": "4  Home Work - 04",
    "section": "4.3 Problem 3: Concentric circles",
    "text": "4.3 Problem 3: Concentric circles\nWrite a function concentric_circles that takes two arguments r and n, and creates n concentric circles with the outer most circle with radius r and with all circles equally distributed from the center, as shown in the pictures below.\n\n\n\n\n\n\n\nconcentric_circles(r=100, n=2)\n\n\n\n\n\n\n\nconcentric_circles(r=100, n=4)\n\n\n\n\n\n\n\nconcentric_circles(r=100, n=8)\n\n\n\n\n\n\n\ndef concentric_circles(n=4):\n    return circle(r=100)| repeat(n, scale(1-1/n))\n\n\nconcentric_circles()"
  },
  {
    "objectID": "hw04.html#problem-4-concentric-circles-in-a-grid",
    "href": "hw04.html#problem-4-concentric-circles-in-a-grid",
    "title": "4  Home Work - 04",
    "section": "4.4 Problem 4: Concentric Circles in a Grid",
    "text": "4.4 Problem 4: Concentric Circles in a Grid\nWrite a program to create a grid of concentric circles as shown in the image below.\n\n\nfrom wizard import *\n\ndef repeat4(shape):\n    return grid(shape, shape, shape, shape)\n\ndef grid(s1, s2, s3, s4):\n    return below(\n        beside(s1, s2),\n        beside(s3, s4))\n\ndef grid_1(shape_maker):\n    return grid(shape_maker(), shape_maker(), shape_maker(), shape_maker())\n\ndef grid_2(shape_maker):\n    def grid_maker():\n        return grid_1(shape_maker)\n    return grid_1(grid_maker)\n\n\ngrid_2(concentric_circles)"
  },
  {
    "objectID": "hw04.html#problem-5-ellipse-stars-in-a-grid",
    "href": "hw04.html#problem-5-ellipse-stars-in-a-grid",
    "title": "4  Home Work - 04",
    "section": "4.5 Problem 5: Ellipse Stars in a Grid",
    "text": "4.5 Problem 5: Ellipse Stars in a Grid\nCan you generalize the above program and use it to draw ellipse stars in a grid instead of concentric circles."
  },
  {
    "objectID": "hw05.html",
    "href": "hw05.html",
    "title": "5  Homework 05",
    "section": "",
    "text": "6 Solution Functions for Touching Circles\nFirst, I wrote the function sigma(n), which adds up all the numbers from 1 to n and returns the result.\nFollowing that, I wrote the function lcircle(x, y, r). This function takes cx = x+r and cy=y(y doesn’t change). After that, lcircle takes c as a circle with x = cx, y = cy and r = r(the second r being the one in the original function). The final result, c, is returned.\nI further modified lcircle to make a function rcircle(x, y, r). The rcircle function is almost identical to lcircle, except that cx in rcircle is equal to x-r, not x+r.\nI rounded off by creating the left_touching_circles function, with n as the argument. This crowning piece takes x = -150 and y = 0. A special variable, r0, is used, which equals 150/sigma(n)(remember that n is the argument for left_touching_circles). The variable r equals r0.\nFor the touching circles, I took an empty list called ‘shapes’. Then I instituted a loop for i in range(n), which produces c = lcircle(x, y, r). This is to make the circles with. Further, x = x+2*r, since the centre of each circle is separated by 2 times the radius. y = 0, because again, y doesn’t change. Since the smallest circle’s radius = r0, and since the radius of each circle after that increases upon r0, r = r+r0. Finally, each c is appended onto shapes, and combine(shapes) is returned to give you the final result.\nleft_touching_circles(8)\ndef right_touching_circles(n):\n    r0 = 150/sigma(n)\n    x = 150\n    y = 0\n    r = r0\n    circles = []\n    for i in range(n):\n        c = rcircle(x, y, r)\n        x = x-2*r\n        y = 0\n        r = r+r0\n        circles.append(c)\n    return combine(circles)\nright_touching_circles(10)\nIn this variant, the smallest circle starts form the right, hence the name. Therefore, although the function right_touching_circles is otherwise structurally identical to left_touching_circles, x = 150, and c is rcircle instead of lcircle. Furthermore, the x in c is x-2 * r rather than x+2 * r. These small, simple changes effectively flip left_touching_circles, giving an entirely new function!\nx = [1,2]\nx.append(3)\nprint(x)\n\n[1, 2, 3]\ncircle()\nsigma(5)\n\n15"
  },
  {
    "objectID": "hw05.html#problem-1-concentric-squares",
    "href": "hw05.html#problem-1-concentric-squares",
    "title": "5  Homework 05",
    "section": "5.1 Problem 1: Concentric Squares",
    "text": "5.1 Problem 1: Concentric Squares\nWrite a function concentric_sqares that takes the size and n as arguments and creates n equally spaced concentric squares with the outer square having width and height of size.\n\n\n\n\n\n\n\nconcentric_squares(200, 4)\n\n\n\n\n\n\n\nconcentric_squares(200, 6)\n\n\n\n\n\n\n\nfrom wizard import *\n\n\ndef concentric_circles(radius, n):\n    delta = radius/n\n    circles = [circle(r=i*delta) for i in range(1, n+1)]\n    return combine(circles)\n\n\ndef concentric_squares(w, n):\n    dx = w/n\n    squares = [rectangle(w=i*dx, h=i*dx) for i in range(1, n+1)]\n    return combine(squares)\n\n\nconcentric_squares(200, 34)"
  },
  {
    "objectID": "hw05.html#problem-2-column-of-shapes",
    "href": "hw05.html#problem-2-column-of-shapes",
    "title": "5  Homework 05",
    "section": "5.2 Problem 2: Column of Shapes",
    "text": "5.2 Problem 2: Column of Shapes\nWrite a function column that takes a list of shapes and arranges them in a column, from top to bottom.\n\n\n\ncolumn([circle(), ellipse(), rectangle(), line()])\n\n\n\ndef row(shapes):\n    n=len(shapes)\n    dx=300/n\n    offset=-150 + dx/2\n    new_shapes=[shapes[i]|scale(1/n)|translate(x=dx*i) for i in range(n)]\n    return combine(new_shapes)|translate(x=offset)\n\n\nrow([circle(), rectangle(), ellipse(), line()])"
  },
  {
    "objectID": "hw05.html#problem-3-row-of-ellipse-stars",
    "href": "hw05.html#problem-3-row-of-ellipse-stars",
    "title": "5  Homework 05",
    "section": "5.3 Problem 3: Row of Ellipse Stars",
    "text": "5.3 Problem 3: Row of Ellipse Stars\nWrite a function row_of_ellipse_stars that take a number n as argument and create n ellipse stars with number of ellipses from 1 to n, placed in a row.\n\n\n\n\n\n\n\nrow_of_ellipse_stars(3)\n\n\n\n\n\n\n\nrow_of_ellipse_stars(6)\n\n\n\n\n\n\n\ndef ellipse_star(n):\n    return ellipse(w=150, h=75)|repeat(n, rotate(180/n))\n\n\ndef row_of_ellipse_stars(n):\n    sequence = [ellipse_star(n) for i in range(1, n+1)]\n    return sequence\n\n\nrow_of_ellipse_stars(3)\n\n[&lt;g {}&gt;, &lt;g {}&gt;, &lt;g {}&gt;]"
  },
  {
    "objectID": "hw05.html#problem-4-con-bottom-ic-circles",
    "href": "hw05.html#problem-4-con-bottom-ic-circles",
    "title": "5  Homework 05",
    "section": "5.4 Problem 4: Con-bottom-ic Circles",
    "text": "5.4 Problem 4: Con-bottom-ic Circles\nWrite a function conbottomic_circles that takes r and n as arguments and draws n circles touching at the bottom point, with uniformly increasing radius and the outermost circle having a radius of r.\nPlease note that radii of circles in drawn here is exactly same as that in concentric circles with same r and n.\n\n\n\n\n\n\n\nconbottomic_circles(50, 5)\n\n\n\n\n\n\n\nconbottomic_circles(70, 10)\n\n\n\n\n\n\n\nconcentric_circles(50, 5)\n\n\n\n\n\ndef concentric_circles(radius, n):\n    delta = radius/n\n    circles = [circle(r=i*delta) for i in range(1, n+1)]\n    return combine(circles)\n\ndef bcircle(bx=0, by=0, r=50):\n    cx = bx\n    cy = by+r\n    return circle(x=cx, y=cy, r=r)\n\ndef conbottomic_circles(r, n):\n    shift = r/n\n    design = [bcircle(r=i*shift) for i in range(1, n+1)]\n    return combine(design)|translate(y=-r)\n\n\nconbottomic_circles(100, 7)\n\n\n\n\n\nconbottomic_circles(50,3)\n\n\n\n\n\ndef bcircle(bx=0, by=0, r=50):\n    cx = bx\n    cy = by+r\n    return circle(x=cx, y=cy, r=r)\n\n\nbcircle(r=25)+bcircle(r=50)+bcircle(r=75)"
  },
  {
    "objectID": "hw05.html#problem-5-touching-circles",
    "href": "hw05.html#problem-5-touching-circles",
    "title": "5  Homework 05",
    "section": "5.5 Problem 5: Touching Circles",
    "text": "5.5 Problem 5: Touching Circles\nDraw 5 circles with radius \\(r\\), \\(2r\\), \\(3r\\), \\(4r\\) and \\(5r\\) in a row such that consequetive circles are touching each other and the combined figure takes the full width of 300 px.\n\n\na = circle(r=10,x=-140)\nb = circle(r=20,x=-110)\nc = circle(r=30, x=-60)\nd = circle(r=40,x=10)\ne = circle(r=50,x=100)\na+b+c+d+e"
  },
  {
    "objectID": "hw05.html#problem-6-generic-touching-circles-bonus-problem",
    "href": "hw05.html#problem-6-generic-touching-circles-bonus-problem",
    "title": "5  Homework 05",
    "section": "5.6 Problem 6: Generic Touching Circles (Bonus Problem)",
    "text": "5.6 Problem 6: Generic Touching Circles (Bonus Problem)\nWrite a function touching_circles that takes a number n as argument and creates a shape with n circles in a row with the consequetive circles touching each other. The radii of the circles uniformly increases from the first circle to the last.\n\n\n\n\n\n\n\ntouching_circles(5)\n\n\n\n\n\n\n\ntouching_circles(8)\n\n\n\n\n\n\n\ndef sigma(n):\n    return sum(range(1, n+1))\n\ndef lcircle(x, y, r):\n    cx = x+r\n    cy = y\n    c = circle(x=cx, y=cy, r=r)\n    return c\n\ndef rcircle(x, y, r):\n    cx = x-r\n    cy = y\n    c = circle(x=cx, y=cy, r=r)\n    return c\n\ndef left_touching_circles(n):\n    r0 = 150/sigma(n)\n    x = -150\n    y = 0\n    r = r0\n    shapes = []\n    for i in range(n):\n        c = lcircle(x, y, r)\n        x = x+2*r\n        y = 0\n        r = r+r0\n        shapes.append(c)\n    return combine(shapes)"
  },
  {
    "objectID": "hw06.html#super-grid-v2",
    "href": "hw06.html#super-grid-v2",
    "title": "6  Homework 06",
    "section": "6.1 Super Grid V2",
    "text": "6.1 Super Grid V2\nThis homework requires the following code.\n\ndef super_grid_v2(shape_maker, n):\n    size = 300/n\n    r = size/2\n    x = -150+r\n    y = -150+r\n    shapes = []\n    for j in range(n):\n        for i in range(n):\n            c = shape_maker(size, row=j, column=i, n=n)|translate(x=x, y=y)\n            shapes.append(c)\n            x = x+size\n        y = y+size\n        x = -150+r\n    return combine(shapes)\n\nA blank shape.\n\nblank = circle(r=0, stroke=\"none\")\n\nThe concentric_circles function is updated to handle 0 and negative values for n.\n\ndef concentric_circles(radius, n):\n    if n &lt;= 0:\n        return blank\n\n    delta = radius/n\n    circles = [circle(r=i*delta) for i in range(1, n+1)]\n    return combine(circles)"
  },
  {
    "objectID": "hw06.html#utilities",
    "href": "hw06.html#utilities",
    "title": "6  Homework 06",
    "section": "6.2 Utilities",
    "text": "6.2 Utilities\nHere are some utilities for you to solve this exercise.\nInstall the python package called tabulate to print tables by running the following command.\n\n!python -m pip install tabulate\n\nRequirement already satisfied: tabulate in c:\\users\\nandu\\appdata\\roaming\\jupyterlab-desktop\\jlab_server\\lib\\site-packages (0.9.0)\n\n\n\n6.2.1 Show Table\nThe following show_table function takes an experession using row, column and n and shows the value of that expression for every cell in a grid of size n.\nPlease note that you need to specify the expression as a string.\n\nfrom tabulate import tabulate\n\ndef show_table(n, expr):\n    rows = list(range(n))[::-1]\n    columns = list(range(n))\n    headers = [\"\"] + [f\"C{c}\" for c in columns]\n    data = [[f\"R{row}\"] +[eval(expr, {\"row\": row, \"column\": column, \"n\": n}) for column in columns] for row in rows]    \n    print(tabulate(data, headers=headers))\n\n\nshow_table(5, \"column\")\n\n      C0    C1    C2    C3    C4\n--  ----  ----  ----  ----  ----\nR4     0     1     2     3     4\nR3     0     1     2     3     4\nR2     0     1     2     3     4\nR1     0     1     2     3     4\nR0     0     1     2     3     4\n\n\n\nshow_table(5, \"column + 1\")\n\n      C0    C1    C2    C3    C4\n--  ----  ----  ----  ----  ----\nR4     1     2     3     4     5\nR3     1     2     3     4     5\nR2     1     2     3     4     5\nR1     1     2     3     4     5\nR0     1     2     3     4     5\n\n\nYou can explore interesting patterns with show_table, before using it with super_grid_v2.\nYou can try with interesting functions.\n\nshow_table(5, \"min(row, column)\")\n\n      C0    C1    C2    C3    C4\n--  ----  ----  ----  ----  ----\nR4     0     1     2     3     4\nR3     0     1     2     3     3\nR2     0     1     2     2     2\nR1     0     1     1     1     1\nR0     0     0     0     0     0\n\n\n\nshow_table(5, \"max(row, column)\")\n\n      C0    C1    C2    C3    C4\n--  ----  ----  ----  ----  ----\nR4     4     4     4     4     4\nR3     3     3     3     3     4\nR2     2     2     2     3     4\nR1     1     1     2     3     4\nR0     0     1     2     3     4\n\n\n\nshow_table(5, \"row-column\")\n\n      C0    C1    C2    C3    C4\n--  ----  ----  ----  ----  ----\nR4     4     3     2     1     0\nR3     3     2     1     0    -1\nR2     2     1     0    -1    -2\nR1     1     0    -1    -2    -3\nR0     0    -1    -2    -3    -4\n\n\nThe abs function computes the absolute value of a number. If we give a negative number, it converts it to a positive number.\n\nshow_table(5, \"abs(row-column)\")\n\n      C0    C1    C2    C3    C4\n--  ----  ----  ----  ----  ----\nR4     4     3     2     1     0\nR3     3     2     1     0     1\nR2     2     1     0     1     2\nR1     1     0     1     2     3\nR0     0     1     2     3     4\n\n\n\nshow_table(5, \"n-row\")\n\n      C0    C1    C2    C3    C4\n--  ----  ----  ----  ----  ----\nR4     1     1     1     1     1\nR3     2     2     2     2     2\nR2     3     3     3     3     3\nR1     4     4     4     4     4\nR0     5     5     5     5     5\n\n\nThe other interesting mathematical function is remainder. In Python, we use the % operator to compute the remainder.\n\n7 % 2\n\n1\n\n\n\n7 % 4\n\n3\n\n\nWe can use remainder to create interesting repeating patterns.\n\nshow_table(12, \"row%3\")\n\n       C0    C1    C2    C3    C4    C5    C6    C7    C8    C9    C10    C11\n---  ----  ----  ----  ----  ----  ----  ----  ----  ----  ----  -----  -----\nR11     2     2     2     2     2     2     2     2     2     2      2      2\nR10     1     1     1     1     1     1     1     1     1     1      1      1\nR9      0     0     0     0     0     0     0     0     0     0      0      0\nR8      2     2     2     2     2     2     2     2     2     2      2      2\nR7      1     1     1     1     1     1     1     1     1     1      1      1\nR6      0     0     0     0     0     0     0     0     0     0      0      0\nR5      2     2     2     2     2     2     2     2     2     2      2      2\nR4      1     1     1     1     1     1     1     1     1     1      1      1\nR3      0     0     0     0     0     0     0     0     0     0      0      0\nR2      2     2     2     2     2     2     2     2     2     2      2      2\nR1      1     1     1     1     1     1     1     1     1     1      1      1\nR0      0     0     0     0     0     0     0     0     0     0      0      0"
  },
  {
    "objectID": "hw06.html#problem-1",
    "href": "hw06.html#problem-1",
    "title": "6  Homework 06",
    "section": "6.3 Problem 1",
    "text": "6.3 Problem 1\nMake the following pattern.\n\n\ndef make_circles(size, row, column, n):\n    #print(f\"make_circles size={size} row={row} column={column}\")\n    return concentric_circles(radius = size/2, n=(column%3)+1)\n\n\nshow_table(5, \"column%3\")\n\n      C0    C1    C2    C3    C4\n--  ----  ----  ----  ----  ----\nR4     0     1     2     0     1\nR3     0     1     2     0     1\nR2     0     1     2     0     1\nR1     0     1     2     0     1\nR0     0     1     2     0     1\n\n\n\ndef make_circles(size, row, column, n):\n    #print(f\"make_circles size={size} row={row} column={column}\")\n    return concentric_circles(radius = size/2, n=(column%3)+1)\n\nsuper_grid_v2(make_circles, 5)"
  },
  {
    "objectID": "hw06.html#problem-2",
    "href": "hw06.html#problem-2",
    "title": "6  Homework 06",
    "section": "6.4 Problem 2",
    "text": "6.4 Problem 2\nMake the following pattern.\n\n\nshow_table(5, \"n-row+column\")\n\n      C0    C1    C2    C3    C4\n--  ----  ----  ----  ----  ----\nR4     1     2     3     4     5\nR3     2     3     4     5     6\nR2     3     4     5     6     7\nR1     4     5     6     7     8\nR0     5     6     7     8     9\n\n\n\nfrom wizard import *\n\n\ndef make_shape(size, row, column, n):\n    return concentric_circles(radius=size/2, n=n-row+column)\n\nsuper_grid_v2(make_shape, 5)"
  },
  {
    "objectID": "hw06.html#problem-3",
    "href": "hw06.html#problem-3",
    "title": "6  Homework 06",
    "section": "6.5 Problem 3",
    "text": "6.5 Problem 3\nMake the following pattern.\n\n\nshow_table(5, \"max(n-row, column+1)\")\n\n      C0    C1    C2    C3    C4\n--  ----  ----  ----  ----  ----\nR4     1     2     3     4     5\nR3     2     2     3     4     5\nR2     3     3     3     4     5\nR1     4     4     4     4     5\nR0     5     5     5     5     5\n\n\n\ndef make_shape(size, row, column, n):\n    return concentric_circles(radius=size/2, n=max(n-row, column+1))\n\nsuper_grid_v2(make_shape, 5)"
  },
  {
    "objectID": "hw06.html#problem-4",
    "href": "hw06.html#problem-4",
    "title": "6  Homework 06",
    "section": "6.6 Problem 4",
    "text": "6.6 Problem 4\nMake the following pattern.\n\n\nshow_table(5, \"abs(n-row-column-1)+1\")\n\n      C0    C1    C2    C3    C4\n--  ----  ----  ----  ----  ----\nR4     1     2     3     4     5\nR3     2     1     2     3     4\nR2     3     2     1     2     3\nR1     4     3     2     1     2\nR0     5     4     3     2     1\n\n\n\ndef make_shape(size, row, column, n):\n    return concentric_circles(radius=size/2, n=abs(n-row-column-1)+1)\n\nsuper_grid_v2(make_shape, 5)"
  },
  {
    "objectID": "hw06.html#problem-5",
    "href": "hw06.html#problem-5",
    "title": "6  Homework 06",
    "section": "6.7 Problem 5",
    "text": "6.7 Problem 5\nMake the following pattern.\n\n\nshow_table(12, \"column%3+1\")\n\n       C0    C1    C2    C3    C4    C5    C6    C7    C8    C9    C10    C11\n---  ----  ----  ----  ----  ----  ----  ----  ----  ----  ----  -----  -----\nR11     1     2     3     1     2     3     1     2     3     1      2      3\nR10     1     2     3     1     2     3     1     2     3     1      2      3\nR9      1     2     3     1     2     3     1     2     3     1      2      3\nR8      1     2     3     1     2     3     1     2     3     1      2      3\nR7      1     2     3     1     2     3     1     2     3     1      2      3\nR6      1     2     3     1     2     3     1     2     3     1      2      3\nR5      1     2     3     1     2     3     1     2     3     1      2      3\nR4      1     2     3     1     2     3     1     2     3     1      2      3\nR3      1     2     3     1     2     3     1     2     3     1      2      3\nR2      1     2     3     1     2     3     1     2     3     1      2      3\nR1      1     2     3     1     2     3     1     2     3     1      2      3\nR0      1     2     3     1     2     3     1     2     3     1      2      3\n\n\n\ndef make_shape(size, row, column, n):\n    return concentric_circles(radius=size/2, n=column%3+1)\n\nsuper_grid_v2(make_shape, 12)"
  },
  {
    "objectID": "hw07.html#utilities",
    "href": "hw07.html#utilities",
    "title": "7  Homework 07",
    "section": "7.1 Utilities",
    "text": "7.1 Utilities\nYou may need to use the following functions of this homework.\n\n7.1.1 Super Grid V2\nThe super_grid_v2 function creates a nxn grid and calls the shape_maker function to draw a shape in each cell of the grid.\nThe shape_maker function gets size - the size of the cell, row, column and n as arguments.\n\ndef super_grid_v2(shape_maker, n):\n    size = 300/n\n    r = size/2\n    x = -150+r\n    y = -150+r\n    shapes = []\n    for j in range(n):\n        for i in range(n):\n            c = shape_maker(size, row=j, column=i, n=n)|translate(x=x, y=y)\n            shapes.append(c)\n            x = x+size\n        y = y+size\n        x = -150+r\n    return combine(shapes)\n\n\ndef make_circle(size, row, column, n):\n    return circle(r=size/2)\n\n\nsuper_grid_v2(make_circle, 5)\n\n\n\n\n\n\n7.1.2 Concentric Circles\nThe concentric_circles function draws n concentric circles with outer circle taking the specified radius.\n\nblank = circle(r=0, stroke=\"none\")\n\ndef concentric_circles(radius, n):\n    if n &lt;= 0:\n        return blank\n\n    delta = radius/n\n    circles = [circle(r=i*delta) for i in range(1, n+1)]\n    return combine(circles)\n\n\nconcentric_circles(radius=100, n=3)\n\n\n\n\n\n\n7.1.3 Show Table\nThe show_table is a utility to see the values an expression over row and column as a table.\n\nfrom tabulate import tabulate\n\ndef show_table(n, expr):\n    rows = list(range(n))[::-1]\n    columns = list(range(n))\n    headers = [\"\"] + [f\"C{c}\" for c in columns]\n    data = [[f\"R{row}\"] +[eval(expr, {\"row\": row, \"column\": column, \"n\": n}) for column in columns] for row in rows]    \n    print(tabulate(data, headers=headers))\n\n\nshow_table(4, \"row + column + 1\")\n\n      C0    C1    C2    C3\n--  ----  ----  ----  ----\nR3     4     5     6     7\nR2     3     4     5     6\nR1     2     3     4     5\nR0     1     2     3     4\n\n\n\nshow_table(4, \"column-row+4\")\n\n      C0    C1    C2    C3\n--  ----  ----  ----  ----\nR3     1     2     3     4\nR2     2     3     4     5\nR1     3     4     5     6\nR0     4     5     6     7"
  },
  {
    "objectID": "hw07.html#problem-1",
    "href": "hw07.html#problem-1",
    "title": "7  Homework 07",
    "section": "7.2 Problem 1",
    "text": "7.2 Problem 1\nDraw the following shape.\n\n\n\nProblem 1\n\n\n\nfrom wizard import *\n\n\ndef make_ellipse_star(size, row, column, n):\n    n=(column-row+4)\n    return ellipse(w=size, h=size/2)|repeat(n, rotate(180/n))\n\n\nsuper_grid_v2(make_ellipse_star, 4)"
  },
  {
    "objectID": "hw07.html#problem-2",
    "href": "hw07.html#problem-2",
    "title": "7  Homework 07",
    "section": "7.3 Problem 2",
    "text": "7.3 Problem 2\nDraw the following shape.\n\n\n\nProblem 2\n\n\n\ndef fat_donut(x, y, r):\n    a = circle(x=x, y=y, r=r)\n    b = circle(x=x, y=y, r=r/3)\n    return a+b\n\ndef circle_bowl(size):\n    size = 300\n    ring = circle(x=100, y=0, r=size/6)|repeat(4, rotate(90))\n    return ring + fat_donut(x=0, y=0, r=size/2)\n\n\ncircle_bowl(300)"
  },
  {
    "objectID": "hw07.html#problem-3",
    "href": "hw07.html#problem-3",
    "title": "7  Homework 07",
    "section": "7.4 Problem 3",
    "text": "7.4 Problem 3\nDraw the following shape.\n\n\n\nProblem 2\n\n\n\ndef circle_bowl(size):\n    size = 300\n    ring = circle(x=100, y=0, r=size/6)|repeat(6, rotate(60))\n    return ring + fat_donut(x=0, y=0, r=size/2)\n\n\ncircle_bowl(300)"
  },
  {
    "objectID": "hw07.html#problem-4",
    "href": "hw07.html#problem-4",
    "title": "7  Homework 07",
    "section": "7.5 problem 4",
    "text": "7.5 problem 4\nWrite a function circle_pattern that takes size and n as arguments and creates the following pattern. The size indicates the width and height of the picture and n indicates the number of circles draws in each part of the picture.\n\n\n\n\n\n\n\ncircle_pattern(200, 3)\n\n\n\n\n\n\n\nconcentric_circles(300, 8)\n\n\n\n\n\n\n\ndef conbottomic_circles(r, n):\n    shift = r/n\n    design = [bcircle(r=i*shift) for i in range(1, n+1)]\n    return combine(design)|translate(y=-r)\n\ndef circle_pattern(size, n):\n    centre = concentric_circles(radius = size/6, n=n)\n    layer = conbottomic_circles(r=size/6, n=n)|translate(y=size/3)|repeat(6, rotate(60))\n    return centre+layer\n\n\ncircle_pattern(200, 3)"
  },
  {
    "objectID": "hw07.html#problem-5",
    "href": "hw07.html#problem-5",
    "title": "7  Homework 07",
    "section": "7.6 Problem 5",
    "text": "7.6 Problem 5\nCan you draw the following shape?\n\n\n\nProblem 5\n\n\nHint: Look at the super_grid and super_grid_v2 functions that you have written before and see if you can modify them to achieve this.\n\nshow_table(6, \"(int(n-row&gt;column))\")\n\n      C0    C1    C2    C3    C4    C5\n--  ----  ----  ----  ----  ----  ----\nR5     1     0     0     0     0     0\nR4     1     1     0     0     0     0\nR3     1     1     1     0     0     0\nR2     1     1     1     1     0     0\nR1     1     1     1     1     1     0\nR0     1     1     1     1     1     1\n\n\n\ndef make_circle_2(size, row, column, n):\n    if n-row&gt;column:\n        return circle(r=size/2)\n    else:\n        return circle(r=0)\n\n\nsuper_grid_v2(make_circle_2, 6)\n\n\n\n\n\n7.6.1 Problem 6 (Optional)\nCan you generalize the solution to Problem 5 and use it to draw the following image?\nYou want to create a function traingular_grid that takes shape_maker and n as arguments, with an approach similar to super_grid_v2.\n\n\n\nProblem 6\n\n\n\ndef super_grid_v2(shape_maker, n):\n    size = 300/n\n    r = size/2\n    x = -150+r\n    y = -150+r\n    shapes = []\n    for j in range(n):\n        for i in range(n):\n            c = shape_maker(size, row=j, column=i, n=n)|translate(x=x, y=y)\n            shapes.append(c)\n            x = x+size\n        y = y+size\n        x = -150+r\n    return combine(shapes)\n\nWe have 6 rows.\nR0-C0\nR1-C0, C1\nR2-C0, C1, C2\nR3-C0, C1, C2, C3\nR4-C0, C1, C2, C3, C4\nR5-C0, C1, C2, C3, C4, C5\n\n\nsuper_grid_v2(make_circle, 3)\n\n0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n\n\n\n\n\n\ndef triangle_table(n):\n    for row in range(n):\n        print(f\"R{row}\", end=\" \")\n        for column in range(n-row):\n            print(f\"C{column}\", end=\" \")\n        print()\n\n\ntriangle_table(6)\n\nR0 C0 C1 C2 C3 C4 C5 \nR1 C0 C1 C2 C3 C4 \nR2 C0 C1 C2 C3 \nR3 C0 C1 C2 \nR4 C0 C1 \nR5 C0 \n\n\n\ndef triangle_grid(shape_maker, n):\n    size = 300/n\n    r = size/2\n    x = -150+r\n    y = -150+r\n    shapes = []\n    for row in range(n):\n        for column in range(n-row):\n            c = shape_maker(size, row=n-row-1, column=column, n=n)|translate(x=x, y=y)\n            shapes.append(c)\n            x = x+size\n        y = y+size\n        x = -150+r\n    return combine(shapes)\n\n\ntriangle_grid(make_circle, 6)\n\n\n\n\n\ndef make_concentric_circles(size, row, column, n):\n    return concentric_circles(radius=size/2, n=row+column+1)\n\n\ntriangle_grid(make_concentric_circles, 6)"
  },
  {
    "objectID": "hw08.html#problem-1",
    "href": "hw08.html#problem-1",
    "title": "8  Homework 08",
    "section": "8.1 Problem 1",
    "text": "8.1 Problem 1\nWrite a recursive function circle_clouds to draw the figure shown below.\nThe function should take two arguments r, the radius of the circle at the centre and n, the number of times to repeat the recursive process. For each turn, it draws a circle in the centre and draw a smaller version of itself with half the size on the left and right ends.\nHint: Use fill=\"white\" to fill the circles.\n\ncircle_clouds(r=75, n=5)\n\nr=50\n\na=circle(r=r, fill=\"white\")\nb=circle(x=-r, r=r/2, fill=\"white\")\nc = circle(x=r, r=r/2, fill=\"white\")\na+b+c\n\n\n\n\n\n\ndef circle_clouds(r, n):\n    a=circle(r=r, fill=\"white\")\n    if n&gt;1:\n        b=circle_clouds(r=r/2, n=n-1)|translate(x=-r)\n        c = circle_clouds(r=r/2, n=n-1)|translate(x=r)\n        return a+b+c\n    else:\n        return a\n\n\ncircle_clouds(75, 7)"
  },
  {
    "objectID": "hw08.html#problem-2",
    "href": "hw08.html#problem-2",
    "title": "8  Homework 08",
    "section": "8.2 Problem 2",
    "text": "8.2 Problem 2\nWhat happens if you modify the above circle_clouds function to draw three smaller shapes, seperated by \\(120\\degree\\) instead of two?\nCan you write a function circle_clouds_3 to achive that?\nHow does the figure look like when you call circle_clouds_3(r=75, n=5)?\n\ndef circle_clouds_3(r, n, k=3):\n    a=circle(r=r, fill=color(255,0,0,1/k), stroke=\"none\")\n    if n&gt;1:\n        b=circle_clouds_3(r=r/2, n=n-1)|translate(x=-r)|repeat(k, rotate(360/k))\n        return a+b\n    else:\n        return a\n\n\ncircle_clouds_3(75, 8, 5)"
  },
  {
    "objectID": "hw08.html#problem-3",
    "href": "hw08.html#problem-3",
    "title": "8  Homework 08",
    "section": "8.3 Problem 3",
    "text": "8.3 Problem 3\nWrite a program to draw the image below.\n\n\n\nProblem 3\n\n\n\ndef fat_donut(x, y, r):\n    a = circle(x=x, y=y, r=r)\n    b = circle(x=x, y=y, r=r/3)\n    return a+b\n\ndef circle_bowl(size):\n    size = 300\n    ring = circle(x=100, y=0, r=size/6)|repeat(4, rotate(90))\n    return ring + fat_donut(x=0, y=0, r=size/2)\n\ndef mega_circle_bowl(r, n):\n    c1=circle(r=r)\n    if n&gt;1:\n        c2=mega_circle_bowl(r=r/3, n=n-1)\n        c3=mega_circle_bowl(r=r/3, n=n-1)|translate(y=r/1.5)|repeat(6, rotate(60))\n        return c1+c2+c3\n    else:\n        return c1\n\ndef circle_plate(r, n):\n    a = circle(r=r)\n    if n&gt;1:\n        b = circle_plate(r=r/2.4, n=n-1)|translate(y=-r/1.7)|repeat(4, rotate(90))\n        return a+b\n    else:\n        return a\n\n\ncircle_plate(150, 5)\n\n\n\n\n\n8.3.1 Problem 4\nConsider the following program.\n\ncircle(x=125, r=25) | repeat(3, rotate(30))\n\n\n\n\n\nc=circle(x=125, r=25)\nc1=c\nc2=c+(c1|rotate(30))\nc2\n\n\n\n\n\nc3=c+(c2|rotate(30))\nc3\n\n\n\n\n\nc4=c+(c3|rotate(30))\nc4\n\n\n\n\nCan you implement the same without using the repeat transformation?\n\ndef recursive_circles(x, r, n, angle):\n    c = circle(x=x, r=r)\n    if n==1:\n        return c\n    else:\n        #cn=c+(cn-1|rotate(angle))\n        cn_1 = recursive_circles(x=x, r=r, n=n-1, angle=angle)\n        return c+(cn_1|rotate(angle))\n\n\nrecursive_circles(x=100, r=25, n=12, angle=30)"
  },
  {
    "objectID": "hw08.html#problem-5",
    "href": "hw08.html#problem-5",
    "title": "8  Homework 08",
    "section": "8.4 Problem 5",
    "text": "8.4 Problem 5\nConsider the following program.\n\ncircle(x=100, r=50) | repeat(100, rotate(10) | scale(0.97))\n\n\n\n\nCan you implement the same without using the repeat transformation?\nHint: Try if you can write a function repeat_transform(shape, n, transform).\n\nr=rotate(30)\nrectangle()|r\n\n\n\n\n\ndef repeat_transform(shape, n, transform):\n    return shape|repeat(n, transform)\n\n\nrepeat_transform(circle(x=100, r=50), 100, rotate(10)|scale(0.97))\n\n\n\n\n\nrepeat_transform(circle(x=100, r=25), 3, rotate(30))\n\n\n\n\n\ndef repeat_transform(shape, n, transform):\n    if n==1:\n        return shape\n    else:\n        #rn=shape+(rn-1|transform)\n        rn_1 = repeat_transform(shape, n-1, transform)\n        rn = shape+(rn_1|transform)\n        return rn\n\n\nrepeat_transform(circle(x=100, r=25), 3, rotate(30))\n\n\n\n\n\nrepeat_transform(circle(x=100, r=50), 100, rotate(10)|scale(0.97))"
  },
  {
    "objectID": "hw08.html#problem-6",
    "href": "hw08.html#problem-6",
    "title": "8  Homework 08",
    "section": "8.5 Problem 6",
    "text": "8.5 Problem 6\n\nAs homework, do problems 3 and 6 using recursive functions."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "9  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]