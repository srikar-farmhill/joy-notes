[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Transmutation Spellbook",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "joy.html",
    "href": "joy.html",
    "title": "2  Joy of Programming",
    "section": "",
    "text": "3 Session 4, 06-10-2023\nfrom wizard import *\ncircle()\nrandom_squares()\ngrid_3(random_squares)\ndef decorate(shape):\n    shape=shape|scale(250/300)\n    return rectangle(w=280, h=280, stroke_width=5)+shape\ndecorate(circle(r=150))\ndef gallery(s1, s2, s3, s4):\n    return grid(decorate(s1), decorate(s2), decorate(s3), decorate(s4))\ndef ellipse_star(n):\n    return ellipse(w=250, h=120)|repeat(n, rotate(180/n))\ndef random_ellipse_star():\n    n= int(random(3, 10))\n    return ellipse_star(n)\ngallery(random_circles(), random_squares(), random_ellipse_star(), grid_1(random_squares))\nint(random(1, 10))\n\n9\ngrid_2(circle)\ncircle?\n\n\nSignature: circle(x=0, y=0, r=100, **kwargs)\nDocstring:\nCreates a circle with center at (x, y) and radius of r.\nExamples:\nDraw a circle.\n    c = circle()\n    show(c)\nDraw a circle with radius 50.\n    c = circle(r=50)\n    show(c)\nDraw a circle with center at (10, 20) and a radius of 50.\n    c = circle(x=10, y=20, r=50)\n    show(c)\nFile:      c:\\users\\nandu\\documents\\github\\joy-notes\\joy.py\nType:      function\nellipse_star?\n\n\nSignature: ellipse_star(n)\nDocstring: &lt;no docstring&gt;\nFile:      c:\\users\\nandu\\appdata\\local\\temp\\ipykernel_19460\\2975163437.py\nType:      function\nsquare?\n\n\nSignature: square(w)\nDocstring:\nCreates a rectangle with a given width, and height equal to the given width.\nExample:\nsquare(100)\nGives a rectangle with width=100, and height equal to width that is, equal to 100.\nFile:      c:\\users\\nandu\\documents\\github\\joy-notes\\wizard.py\nType:      function\nnumbers = [1, 2, 3, 4, 5]\nnumbers.append(6)\nnumbers\n\n[1, 2, 3, 4, 5, 6]\ndef squares(numbers):\n    result = []\n    for n in numbers:\n        result.append(n*n)\n    return result\nsquares([19, 8, 16])\n\n[361, 64, 256]\ndef new_squares(numbers):\n    return [n*n for n in numbers]\nnew_squares([65, 20, 34])\n\n[4225, 400, 1156]\nsum(new_squares(range(5)))\n\n30\nsum(new_squares(range(1000000)))\n\n333332833333500000\n[n*n for n in range(10) if n%2==0]\n\n[0, 4, 16, 36, 64]\nsum([n*n for n in range(1000000) if n%2==0])\n\n166666166667000000\n[n for n in range(100) if n%5==0]\n\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\nlist(range(0, 100, 5))\n\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\nimport math\nstep = 4.5\nn=math.ceil(100/step)\nn\n\n23\n[i*step for i in range(n)]\n\n[0.0,\n 4.5,\n 9.0,\n 13.5,\n 18.0,\n 22.5,\n 27.0,\n 31.5,\n 36.0,\n 40.5,\n 45.0,\n 49.5,\n 54.0,\n 58.5,\n 63.0,\n 67.5,\n 72.0,\n 76.5,\n 81.0,\n 85.5,\n 90.0,\n 94.5,\n 99.0]\nmath.ceil(22.22)\n\n23\nmath.floor(22.22)\n\n22"
  },
  {
    "objectID": "joy.html#joy",
    "href": "joy.html#joy",
    "title": "2  Joy of Programming",
    "section": "2.1 Joy",
    "text": "2.1 Joy\nJoy supports working with Jupyter notebooks. Is displays a shape automatically, without having to call the show function.\n\ncircle()\n\n\n\n\n\ncircle(r=25, x=100) | repeat(200, rotate(10)|scale(0.985))"
  },
  {
    "objectID": "joy.html#interactive-widgets",
    "href": "joy.html#interactive-widgets",
    "title": "2  Joy of Programming",
    "section": "2.2 Interactive Widgets",
    "text": "2.2 Interactive Widgets\nJupyter supports interactive widgets that allow adding a slider to change values and see the updated image in real-time.\nLet’s start with a simple example of star and see if we can make it interactive.\n\ndef star(n):\n    angle = 180/n\n    return line() | repeat(n, rotate(angle))\n\n\nstar(5)\n\n\n\n\nLet’s make it interactive using the interactive function. Notice that we have specified the value of n as an IntSlider.\n\ninteract(star, n=IntSlider(value=5, min=1, max=30))\n\n\n\n\n&lt;function __main__.star(n)&gt;\n\n\nInteractive widgets makes it easy to discover the correct value of scale or angle when making complex shapes.\n\ndef spiral(scale_factor):\n    return circle(r=25, x=100) | repeat(200, rotate(10)|scale(scale_factor))\n\n\nspiral(0.95)\n\n\n\n\n\ninteract(spiral, \n         scale_factor=FloatSlider(value=0.9, min=0.8, max=1.0, step=0.001, readout_format=\"0.3f\"))\n\n\n\n\n&lt;function __main__.spiral(scale_factor)&gt;\n\n\nTry doing the interactive widget for drawing a magic squares.\n\nrectangle(w=250, h=250) | repeat(200, rotate(10)|scale(0.8))\n\n\n\n\nCan you convert that into an interactive widget?\n\ndef magic_squares(scale_factor):\n    return rectangle(w=250, h=250)|repeat(200, rotate(10)|scale(scale_factor))\n\n\ninteract(magic_squares,\n         scale_factor = FloatSlider(value=0.9, min=0.1, max=1.0, step=0.01))\n\n\n\n\n&lt;function __main__.magic_squares(scale_factor)&gt;\n\n\n\ndef magic_ellipse(scale_factor, n, s):\n    return ellipse(w=150, h=300)|scale(s)|repeat(n, rotate(10)|scale(scale_factor))\n\n\ninteract(magic_ellipse, \n         scale_factor=FloatSlider(value=0.9, min=0.6, max=1.0, step=0.01),\n        n=IntSlider(value=100, min=1, max=150),\n        s=FloatSlider(value=0.20, min=0.01, max=1.00, step=0.01),)\n\n\n\n\n&lt;function __main__.magic_ellipse(scale_factor, n, s)&gt;\n\n\n\nnames = [\"Alice\", \"Bob\", \"Carol\", \"Dave\"]\n\n\nfor name in names:\n    print(\"Hello\", name)\n\nHello Alice\nHello Bob\nHello Carol\nHello Dave\n\n\n\nnames.append(\"Elly\")\n\n\nnames\n\n['Alice', 'Bob', 'Carol', 'Dave', 'Elly']\n\n\n\nnumbers = [1, 2, 3, 4, 5]\n\n\nresult = []\nfor n in numbers:\n    result.append(n*n)\n\n\nresult\n\n[1, 4, 9, 16, 25]\n\n\n\n[n*n for n in numbers]\n\n[1, 4, 9, 16, 25]\n\n\n\ncircles = [circle(r=r) for r in range(10, 100, 10)]\n\n\ncombine(circles)\n\n\n\n\n\nrandom(42)\n\n20.11370850697841\n\n\n\ndef random_circles(r, n):\n    shapes = [circle(r=random(r)) for i in range(n)]\n    return combine(shapes)\n\n\nrandom_circles(150, 30)"
  },
  {
    "objectID": "joy.html#concentric-circles",
    "href": "joy.html#concentric-circles",
    "title": "2  Joy of Programming",
    "section": "4.1 Concentric Circles",
    "text": "4.1 Concentric Circles\n\nradius = 100\nn=4\n\n\ncircle(r=100)+circle(r=90)+circle(r=80)+circle(r=70)\n\n\n\n\n\ncircle(r=100)+circle(r=75)+circle(r=50)+circle(r=25)\n\n\n\n\n\ncircle(r=100)+circle(r=80)+circle(r=60)+circle(r=40)+circle(r=20)\n\n\n\n\n\nradius = 100\nn=4\n\ndelta = radius/n\n\n\ndelta\n\n25.0\n\n\n\n[i*delta for i in range(1, n+1)]\n\n[25.0, 50.0, 75.0, 100.0]\n\n\n\ncircles = [circle(r = i*delta) for i in range(1, n+1)]\n\n\ncircles\n\n[&lt;circle {'cx': 0, 'cy': 0, 'r': 25.0}&gt;,\n &lt;circle {'cx': 0, 'cy': 0, 'r': 50.0}&gt;,\n &lt;circle {'cx': 0, 'cy': 0, 'r': 75.0}&gt;,\n &lt;circle {'cx': 0, 'cy': 0, 'r': 100.0}&gt;]\n\n\n\ncircles[3]\n\n\n\n\n\ncombine(circles)\n\n\n\n\n\ndef concentric_circles(radius, n):\n    delta = radius/n\n    circles = [circle(r=i*delta) for i in range(1, n+1)]\n    return combine(circles)\n\n\nconcentric_circles(100, 5)\n\n\n\n\n\nconcentric_circles(10, 5)\n\n\n\n\n\nconcentric_circles(100, 20)"
  },
  {
    "objectID": "joy.html#a-row-of-shapes",
    "href": "joy.html#a-row-of-shapes",
    "title": "2  Joy of Programming",
    "section": "4.2 A Row of Shapes",
    "text": "4.2 A Row of Shapes\n\ns1=circle()\ns2=rectangle()\n\n\ns1+s2\n\n\n\n\n\na=s1|scale(0.5)|translate(x=-100)\n\nb=s2|scale(0.5)|translate(x=100)\n\na+b\n\n\n\n\n\ns1=concentric_circles(150, 1)\ns2=concentric_circles(150, 2)\ns3=concentric_circles(150, 3)\ns4=concentric_circles(150, 4)\n\n\na=s1|scale(1/3)|translate(x=-100)\nb=s2|scale(1/3)\nc=s3|scale(1/3)|translate(x=100)\n\na+b+c\n\n\n\n\n\ndx = 300/4\na=s1|scale(1/4)|translate(x=0)\nb=s2|scale(1/4)|translate(x=dx)\nc=s3|scale(1/4)|translate(x=2*dx)\nd=s4|scale(1/4)|translate(x=3*dx)\n\nshape = a+b+c+d\n\nshape|translate(x=-150+dx/2)\n\n\n\n\n\ndef row(shapes):\n    n=len(shapes)\n    dx=300/n\n    offset=-150 + dx/2\n    new_shapes=[shapes[i]|scale(1/n)|translate(x=dx*i) for i in range(n)]\n    return combine(new_shapes)|translate(x=offset)\n\n\nrow([s1, s2])\n\n\n\n\n\nrow([concentric_circles(150, 10), concentric_circles(150, 4)])\n\n\n\n\n\nrow([concentric_circles(150, 1),\n     concentric_circles(150, 2),\n     concentric_circles(150, 3),\n     concentric_circles(150, 4), \n     concentric_circles(150, 5)])\n\n\n\n\n\ndef row_of_concentric_circles(n):\n    shapes=[concentric_circles(150, n-i) for i in range(n)]\n    return row(shapes)\n\n\nrow_of_concentric_circles(5)\n\n\n\n\n\n[i+1 for i in range(5)]\n\n[1, 2, 3, 4, 5]\n\n\n\n[5-i for i in range(5)]\n\n[5, 4, 3, 2, 1]"
  },
  {
    "objectID": "joy.html#session-7-27-10-2023",
    "href": "joy.html#session-7-27-10-2023",
    "title": "2  Joy of Programming",
    "section": "4.3 Session 7 27-10-2023",
    "text": "4.3 Session 7 27-10-2023\n\ndef circle_grid(n):\n    size = 300/n\n    r = size/2\n    x = -150+r\n    y = -150+r\n    shapes = []\n    for j in range(n):\n        for i in range(n):\n            c = circle(x, y, r)\n            shapes.append(c)\n            x = x+size\n        y = y+size\n        x = -150+r\n    return combine(shapes)\n\n\ncircle_grid(9)"
  },
  {
    "objectID": "hw03.html#problem-1-square-in-square",
    "href": "hw03.html#problem-1-square-in-square",
    "title": "3  Home Work - 03",
    "section": "3.1 Problem 1: Square in square",
    "text": "3.1 Problem 1: Square in square\nWrite Python code to draw the following image.\nPlease note that there are a total of 6 squares in this image. What scaling factor would you use and why?\n\n\nrectangle(w=300, h=300) | repeat(6, scale(0.7)| rotate(45))"
  },
  {
    "objectID": "hw03.html#problem-2-star",
    "href": "hw03.html#problem-2-star",
    "title": "3  Home Work - 03",
    "section": "3.2 Problem 2: Star",
    "text": "3.2 Problem 2: Star\nWrite a function star that takes a number n as argument and creates a start using n ellipses as shown below.\n\n\n\n\n\n\n\nstar(2)\n\n\n\n\n\n\n\nstar(3)\n\n\n\n\n\n\n\nstar(4)\n\n\n\n\n\n\n\ndef ellipse_star(n):\n    return ellipse(w=150, h=75)|repeat(n, rotate(180/n))\n\n\nellipse_star(4)"
  },
  {
    "objectID": "hw03.html#problem-3-interactive-star",
    "href": "hw03.html#problem-3-interactive-star",
    "title": "3  Home Work - 03",
    "section": "3.3 Problem 3: Interactive Star",
    "text": "3.3 Problem 3: Interactive Star\nMake the star function interatve by adding a slider to change the value of n from 1 to 10.\n\ninteract(ellipse_star, n=IntSlider(value=4, min=1, max=10, step=1))\n\n\n\n\n&lt;function __main__.ellipse_star(n)&gt;"
  },
  {
    "objectID": "hw03.html#problem-4-random-circles-in-grid",
    "href": "hw03.html#problem-4-random-circles-in-grid",
    "title": "3  Home Work - 03",
    "section": "3.4 Problem 4: Random Circles in Grid",
    "text": "3.4 Problem 4: Random Circles in Grid\nWrite a function random_circles to create a shape with many random concentric circles and use that to put it in a grid. You can use the beside, below and grid function defined in the last class. They are included below for your convenience.\n\n\ndef beside(s1, s2):\n    s1 = s1 | scale(x=0.5) | translate(x=-75)\n    s2 = s2 | scale(x=0.5) | translate(x=75)    \n    return s1+s2\n\ndef below(s1, s2):\n    s1 = s1 | scale(y=0.5) | translate(y=75)\n    s2 = s2 | scale(y=0.5) | translate(y=-75)    \n    return s1+s2\n\ndef grid(s1, s2, s3, s4):\n    return below(\n        beside(s1, s2),\n        beside(s3, s4))\n\n\ndef random_circles(r, n):\n    shapes = [circle(r=random(r)) for i in range(n)]\n    return combine(shapes)\n\n\ndef repeat4(shape):\n    return grid(shape, shape, shape, shape)\n\n\ngrid(random_circles(100, 25), random_circles(100, 25), random_circles(100, 25), random_circles(100, 25))"
  },
  {
    "objectID": "hw03.html#problem-5-more-concentric-circles-in-a-grid",
    "href": "hw03.html#problem-5-more-concentric-circles-in-a-grid",
    "title": "3  Home Work - 03",
    "section": "3.5 Problem 5: More Concentric Circles in a Grid",
    "text": "3.5 Problem 5: More Concentric Circles in a Grid\nWhat does it take to put many more concentric circles in a large grid? Will you be able to put 64 of them in an 8x8 grid as shown below?\n\n\nrepeat4(repeat4(repeat4(random_circles(150, 105))))\n\n\n\n\n\ndef random_circles_2():\n    return random_circles(r=125, n=10)\n\n\nrandom_circles_2()\n\n\n\n\n\ndef random_circle_grid():\n    return grid(random_circles_2(), random_circles_2(), random_circles_2(), random_circles_2())\n\n\nrandom_circle_grid()\n\n\n\n\n\ndef random_circle_megagrid():\n    return grid(random_circle_grid(), random_circle_grid(), random_circle_grid(), random_circle_grid())\n\n\nrandom_circle_megagrid()\n\n\n\n\n\ndef random_circle_supergrid():\n    return grid(random_circle_megagrid(), random_circle_megagrid(), random_circle_megagrid(), random_circle_megagrid())\n\n\nrandom_circle_supergrid()\n\n\n\n\n\nx=1\n\n\ny=x\n\n\ny\n\n1\n\n\n\nrandom_circles_2()\n\n\n\n\n\nf=random_circles_2\nf\n\n&lt;function __main__.random_circles_2()&gt;\n\n\n\nf()\n\n\n\n\n\ndef grid_1(shape_maker):\n    return grid(shape_maker(), shape_maker(), shape_maker(), shape_maker())\n\n\ngrid_1(random_circles_2)\n\n\n\n\n\ndef square(w):\n    return rectangle(w=w, h=w)\n\ndef random_squares(w=250, n=15):\n    shapes = [square(w=random(w)) for i in range(n)]\n    return combine(shapes)\n\n\nrandom_squares()\n\n\n\n\n\ngrid_1(random_squares)\n\n\n\n\n\ndef grid_2(shape_maker):\n    def grid_maker():\n        return grid_1(shape_maker)\n    return grid_1(grid_maker)\n\n\ngrid_2(random_circles_2)\n\n\n\n\n\ngrid_2(random_squares)\n\n\n\n\n\ndef grid_3(shape_maker):\n    def grid_maker():\n        return grid_1(shape_maker)\n    return grid_2(grid_maker)\n\n\ngrid_3(random_squares)"
  },
  {
    "objectID": "hw04.html#problem-1-random-concentric-circles-in-a-6x6-grid",
    "href": "hw04.html#problem-1-random-concentric-circles-in-a-6x6-grid",
    "title": "4  Home Work - 04",
    "section": "4.1 Problem 1: Random Concentric Circles in a 6x6 Grid",
    "text": "4.1 Problem 1: Random Concentric Circles in a 6x6 Grid\nArrange random concentric circles in a 6x6 grid as shown in the image below.\n\n\ndef circle_row(n):\n    return circle(x=-125, y=125, r=(25))|repeat(n, translate(x=50))\n\n\ncircle_row(6)|repeat(6, translate(y=-50))"
  },
  {
    "objectID": "hw04.html#problem-2-random-concentric-squares-in-a-6x6-grid",
    "href": "hw04.html#problem-2-random-concentric-squares-in-a-6x6-grid",
    "title": "4  Home Work - 04",
    "section": "4.2 Problem 2: : Random Concentric Squares in a 6x6 Grid",
    "text": "4.2 Problem 2: : Random Concentric Squares in a 6x6 Grid\nCan you make the solution to the above problem generic enough that it could be used to make a 6x6 grid of random concentric squares as shown in the image below.\n\n\ndef square_row():\n    return rectangle(w=45, h=45, x=-125, y=125)|repeat(6, translate(x=50))\n\n\nsquare_row()\n\n\n\n\n\nsquare_row()|repeat(6, translate(y=-50))"
  },
  {
    "objectID": "hw04.html#problem-3-concentric-circles",
    "href": "hw04.html#problem-3-concentric-circles",
    "title": "4  Home Work - 04",
    "section": "4.3 Problem 3: Concentric circles",
    "text": "4.3 Problem 3: Concentric circles\nWrite a function concentric_circles that takes two arguments r and n, and creates n concentric circles with the outer most circle with radius r and with all circles equally distributed from the center, as shown in the pictures below.\n\n\n\n\n\n\n\nconcentric_circles(r=100, n=2)\n\n\n\n\n\n\n\nconcentric_circles(r=100, n=4)\n\n\n\n\n\n\n\nconcentric_circles(r=100, n=8)\n\n\n\n\n\n\n\ndef concentric_circles(n=4):\n    return circle(r=100)| repeat(n, scale(1-1/n))\n\n\nconcentric_circles()"
  },
  {
    "objectID": "hw04.html#problem-4-concentric-circles-in-a-grid",
    "href": "hw04.html#problem-4-concentric-circles-in-a-grid",
    "title": "4  Home Work - 04",
    "section": "4.4 Problem 4: Concentric Circles in a Grid",
    "text": "4.4 Problem 4: Concentric Circles in a Grid\nWrite a program to create a grid of concentric circles as shown in the image below.\n\n\nfrom wizard import *\n\ndef repeat4(shape):\n    return grid(shape, shape, shape, shape)\n\ndef grid(s1, s2, s3, s4):\n    return below(\n        beside(s1, s2),\n        beside(s3, s4))\n\ndef grid_1(shape_maker):\n    return grid(shape_maker(), shape_maker(), shape_maker(), shape_maker())\n\ndef grid_2(shape_maker):\n    def grid_maker():\n        return grid_1(shape_maker)\n    return grid_1(grid_maker)\n\n\ngrid_2(concentric_circles)"
  },
  {
    "objectID": "hw04.html#problem-5-ellipse-stars-in-a-grid",
    "href": "hw04.html#problem-5-ellipse-stars-in-a-grid",
    "title": "4  Home Work - 04",
    "section": "4.5 Problem 5: Ellipse Stars in a Grid",
    "text": "4.5 Problem 5: Ellipse Stars in a Grid\nCan you generalize the above program and use it to draw ellipse stars in a grid instead of concentric circles."
  },
  {
    "objectID": "hw05.html",
    "href": "hw05.html",
    "title": "5  Homework 05",
    "section": "",
    "text": "6 Solution Functioons for Touching Circles\nFirst, I wrote the function sigma(n), which adds up all the numbers from 1 to n and returns the result.\nFollowing that, I wrote the function lcircle(x, y, r). This function takes cx = x+r and cy=y(y doesn’t change). After that, lcircle takes c = a circle with x = cx, y = cy and r = r(the second r being the one in the original function). The final result, c, is returned.\nI further modified lcircle to make a function rcircle(x, y, r). The rcircle function is almost identical to lcircle, except that cx in rcircle = x-r, not x+r.\nI rounded off by creating the left_touching_circles function, with n as the argument. This crowning piece takes x to be -150 and y = 0. A special variable, r0, is used, which equals 150/sigma(n)(remember that n is the argument for left_touching_circles). The variable r equals r0.\nFor the touching circles, I took an empty list called ‘shapes’. Then I instituted a loop for i in range(n), which produces c = lcircle(x, y, r). This is to make the circles with. Further, x = x+2*r, since the centre of each circle is separated by 2 times the radius. y = 0, because again, y doesn’t change. Since the smallest circle’s radius = r0, and since the radius of each circle after that increases upon r0, r = r+r0. Finally, each c is appended onto shapes, and combine(shapes) is returned to give you the final result.\nleft_touching_circles(8)\ndef right_touching_circles(n):\n    r0 = 150/sigma(n)\n    x = 150\n    y = 0\n    r = r0\n    circles = []\n    for i in range(n):\n        c = rcircle(x, y, r)\n        x = x-2*r\n        y = 0\n        r = r+r0\n        circles.append(c)\n    return combine(circles)\nright_touching_circles(10)|repeat(8, rotate(45))\nx = [1,2]\nx.append(3)\nprint(x)\n\n[1, 2, 3]\ncircle()\nsigma(5)\n\n15"
  },
  {
    "objectID": "hw05.html#problem-1-concentric-squares",
    "href": "hw05.html#problem-1-concentric-squares",
    "title": "5  Homework 05",
    "section": "5.1 Problem 1: Concentric Squares",
    "text": "5.1 Problem 1: Concentric Squares\nWrite a function concentric_sqares that takes the size and n as arguments and creates n equally spaced concentric squares with the outer square having width and height of size.\n\n\n\n\n\n\n\nconcentric_squares(200, 4)\n\n\n\n\n\n\n\nconcentric_squares(200, 6)\n\n\n\n\n\n\n\nfrom wizard import *\n\n\ndef concentric_circles(radius, n):\n    delta = radius/n\n    circles = [circle(r=i*delta) for i in range(1, n+1)]\n    return combine(circles)\n\n\ndef concentric_squares(w, n):\n    dx = w/n\n    squares = [rectangle(w=i*dx, h=i*dx) for i in range(1, n+1)]\n    return combine(squares)\n\n\nconcentric_squares(200, 34)"
  },
  {
    "objectID": "hw05.html#problem-2-column-of-shapes",
    "href": "hw05.html#problem-2-column-of-shapes",
    "title": "5  Homework 05",
    "section": "5.2 Problem 2: Column of Shapes",
    "text": "5.2 Problem 2: Column of Shapes\nWrite a function column that takes a list of shapes and arranges them in a column, from top to bottom.\n\n\n\ncolumn([circle(), ellipse(), rectangle(), line()])\n\n\n\ndef row(shapes):\n    n=len(shapes)\n    dx=300/n\n    offset=-150 + dx/2\n    new_shapes=[shapes[i]|scale(1/n)|translate(x=dx*i) for i in range(n)]\n    return combine(new_shapes)|translate(x=offset)\n\n\nrow([circle(), rectangle(), ellipse(), line()])"
  },
  {
    "objectID": "hw05.html#problem-3-row-of-ellipse-stars",
    "href": "hw05.html#problem-3-row-of-ellipse-stars",
    "title": "5  Homework 05",
    "section": "5.3 Problem 3: Row of Ellipse Stars",
    "text": "5.3 Problem 3: Row of Ellipse Stars\nWrite a function row_of_ellipse_stars that take a number n as argument and create n ellipse stars with number of ellipses from 1 to n, placed in a row.\n\n\n\n\n\n\n\nrow_of_ellipse_stars(3)\n\n\n\n\n\n\n\nrow_of_ellipse_stars(6)\n\n\n\n\n\n\n\ndef ellipse_star(n):\n    return ellipse(w=150, h=75)|repeat(n, rotate(180/n))\n\n\ndef row_of_ellipse_stars(n):\n    sequence = [ellipse_star(n) for i in range(1, n+1)]\n    return sequence\n\n\nrow_of_ellipse_stars(3)\n\n[&lt;g {}&gt;, &lt;g {}&gt;, &lt;g {}&gt;]"
  },
  {
    "objectID": "hw05.html#problem-4-con-bottom-ic-circles",
    "href": "hw05.html#problem-4-con-bottom-ic-circles",
    "title": "5  Homework 05",
    "section": "5.4 Problem 4: Con-bottom-ic Circles",
    "text": "5.4 Problem 4: Con-bottom-ic Circles\nWrite a function conbottomic_circles that takes r and n as arguments and draws n circles touching at the bottom point, with uniformly increasing radius and the outermost circle having a radius of r.\nPlease note that radii of circles in drawn here is exactly same as that in concentric circles with same r and n.\n\n\n\n\n\n\n\nconbottomic_circles(50, 5)\n\n\n\n\n\n\n\nconbottomic_circles(70, 10)\n\n\n\n\n\n\n\nconcentric_circles(50, 5)\n\n\n\n\n\ndef concentric_circles(radius, n):\n    delta = radius/n\n    circles = [circle(r=i*delta) for i in range(1, n+1)]\n    return combine(circles)\n\ndef bcircle(bx=0, by=0, r=50):\n    cx = bx\n    cy = by+r\n    return circle(x=cx, y=cy, r=r)\n\ndef conbottomic_circles(r, n):\n    shift = r/n\n    design = [bcircle(r=i*shift) for i in range(1, n+1)]\n    return combine(design)|translate(y=-r)\n\n\nconbottomic_circles(100, 7)\n\n\n\n\n\nconbottomic_circles(50,3)\n\n\n\n\n\ndef bcircle(bx=0, by=0, r=50):\n    cx = bx\n    cy = by+r\n    return circle(x=cx, y=cy, r=r)\n\n\nbcircle(r=25)+bcircle(r=50)+bcircle(r=75)"
  },
  {
    "objectID": "hw05.html#problem-5-touching-circles",
    "href": "hw05.html#problem-5-touching-circles",
    "title": "5  Homework 05",
    "section": "5.5 Problem 5: Touching Circles",
    "text": "5.5 Problem 5: Touching Circles\nDraw 5 circles with radius \\(r\\), \\(2r\\), \\(3r\\), \\(4r\\) and \\(5r\\) in a row such that consequetive circles are touching each other and the combined figure takes the full width of 300 px.\n\n\na = circle(r=10,x=-140)\nb = circle(r=20,x=-110)\nc = circle(r=30, x=-60)\nd = circle(r=40,x=10)\ne = circle(r=50,x=100)\na+b+c+d+e"
  },
  {
    "objectID": "hw05.html#problem-6-generic-touching-circles-bonus-problem",
    "href": "hw05.html#problem-6-generic-touching-circles-bonus-problem",
    "title": "5  Homework 05",
    "section": "5.6 Problem 6: Generic Touching Circles (Bonus Problem)",
    "text": "5.6 Problem 6: Generic Touching Circles (Bonus Problem)\nWrite a function touching_circles that takes a number n as argument and creates a shape with n circles in a row with the consequetive circles touching each other. The radii of the circles uniformly increases from the first circle to the last.\n\n\n\n\n\n\n\ntouching_circles(5)\n\n\n\n\n\n\n\ntouching_circles(8)\n\n\n\n\n\n\n\ndef sigma(n):\n    return sum(range(1, n+1))\n\ndef lcircle(x, y, r):\n    cx = x+r\n    cy = y\n    c = circle(x=cx, y=cy, r=r)\n    return c\n\ndef rcircle(x, y, r):\n    cx = x-r\n    cy = y\n    c = circle(x=cx, y=cy, r=r)\n    return c\n\ndef left_touching_circles(n):\n    r0 = 150/sigma(n)\n    x = -150\n    y = 0\n    r = r0\n    shapes = []\n    for i in range(n):\n        c = lcircle(x, y, r)\n        x = x+2*r\n        y = 0\n        r = r+r0\n        shapes.append(c)\n    return combine(shapes)"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "6  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]