[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Transmutation Spellbook",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "joy.html",
    "href": "joy.html",
    "title": "2  Joy of Programming",
    "section": "",
    "text": "3 Session 4, 06-10-2023\nfrom wizard import *\ncircle()\nrandom_squares()\ngrid_3(random_squares)\ndef decorate(shape):\n    shape=shape|scale(250/300)\n    return rectangle(w=280, h=280, stroke_width=5)+shape\ndecorate(circle(r=150))\ndef gallery(s1, s2, s3, s4):\n    return grid(decorate(s1), decorate(s2), decorate(s3), decorate(s4))\ndef ellipse_star(n):\n    return ellipse(w=250, h=120)|repeat(n, rotate(180/n))\ndef random_ellipse_star():\n    n= int(random(3, 10))\n    return ellipse_star(n)\ngallery(random_circles(), random_squares(), random_ellipse_star(), grid_1(random_squares))\nint(random(1, 10))\n\n7\ngrid_2(circle)\ncircle?\n\n\nSignature: circle(x=0, y=0, r=100, **kwargs)\nDocstring:\nCreates a circle with center at (x, y) and radius of r.\nExamples:\nDraw a circle.\n    c = circle()\n    show(c)\nDraw a circle with radius 50.\n    c = circle(r=50)\n    show(c)\nDraw a circle with center at (10, 20) and a radius of 50.\n    c = circle(x=10, y=20, r=50)\n    show(c)\nFile:      ~/joy.py\nType:      function\nellipse_star?\n\n\nSignature: ellipse_star(n)\nDocstring: &lt;no docstring&gt;\nFile:      /tmp/ipykernel_1151176/2975163437.py\nType:      function\nsquare?\n\n\nSignature: square(w)\nDocstring:\nCreates a rectangle with a given width, and height equal to the given width.\nExample:\nsquare(100)\nGives a rectangle with width=100, and height equal to width that is, equal to 100.\nFile:      ~/wizard.py\nType:      function\nnumbers = [1, 2, 3, 4, 5]\nnumbers.append(6)\nnumbers\n\n[1, 2, 3, 4, 5, 6]\ndef squares(numbers):\n    result = []\n    for n in numbers:\n        result.append(n*n)\n    return result\nsquares([19, 8, 16])\n\n[361, 64, 256]\ndef new_squares(numbers):\n    return [n*n for n in numbers]\nnew_squares([65, 20, 34])\n\n[4225, 400, 1156]\nsum(new_squares(range(5)))\n\n30\nsum(new_squares(range(1000000)))\n\n333332833333500000\n[n*n for n in range(10) if n%2==0]\n\n[0, 4, 16, 36, 64]\nsum([n*n for n in range(1000000) if n%2==0])\n\n166666166667000000\n[n for n in range(100) if n%5==0]\n\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\nlist(range(0, 100, 5))\n\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\nimport math\nstep = 4.5\nn=math.ceil(100/step)\nn\n\n23\n[i*step for i in range(n)]\n\n[0.0,\n 4.5,\n 9.0,\n 13.5,\n 18.0,\n 22.5,\n 27.0,\n 31.5,\n 36.0,\n 40.5,\n 45.0,\n 49.5,\n 54.0,\n 58.5,\n 63.0,\n 67.5,\n 72.0,\n 76.5,\n 81.0,\n 85.5,\n 90.0,\n 94.5,\n 99.0]\nmath.ceil(22.22)\n\n23\nmath.floor(22.22)\n\n22"
  },
  {
    "objectID": "joy.html#joy",
    "href": "joy.html#joy",
    "title": "2  Joy of Programming",
    "section": "2.1 Joy",
    "text": "2.1 Joy\nJoy supports working with Jupyter notebooks. Is displays a shape automatically, without having to call the show function.\n\ncircle()\n\n\n\n\n\ncircle(r=25, x=100) | repeat(200, rotate(10)|scale(0.985))"
  },
  {
    "objectID": "joy.html#interactive-widgets",
    "href": "joy.html#interactive-widgets",
    "title": "2  Joy of Programming",
    "section": "2.2 Interactive Widgets",
    "text": "2.2 Interactive Widgets\nJupyter supports interactive widgets that allow adding a slider to change values and see the updated image in real-time.\nLet’s start with a simple example of star and see if we can make it interactive.\n\ndef star(n):\n    angle = 180/n\n    return line() | repeat(n, rotate(angle))\n\n\nstar(5)\n\n\n\n\nLet’s make it interactive using the interactive function. Notice that we have specified the value of n as an IntSlider.\n\ninteract(star, n=IntSlider(value=5, min=1, max=30))\n\n\n\n\n&lt;function __main__.star(n)&gt;\n\n\nInteractive widgets makes it easy to discover the correct value of scale or angle when making complex shapes.\n\ndef spiral(scale_factor):\n    return circle(r=25, x=100) | repeat(200, rotate(10)|scale(scale_factor))\n\n\nspiral(0.95)\n\n\n\n\n\ninteract(spiral, \n         scale_factor=FloatSlider(value=0.9, min=0.8, max=1.0, step=0.001, readout_format=\"0.3f\"))\n\n\n\n\n&lt;function __main__.spiral(scale_factor)&gt;\n\n\nTry doing the interactive widget for drawing a magic squares.\n\nrectangle(w=250, h=250) | repeat(200, rotate(10)|scale(0.8))\n\n\n\n\nCan you convert that into an interactive widget?\n\ndef magic_squares(scale_factor):\n    return rectangle(w=250, h=250)|repeat(200, rotate(10)|scale(scale_factor))\n\n\ninteract(magic_squares,\n         scale_factor = FloatSlider(value=0.9, min=0.1, max=1.0, step=0.01))\n\n\n\n\n&lt;function __main__.magic_squares(scale_factor)&gt;\n\n\n\ndef magic_ellipse(scale_factor, n, s):\n    return ellipse(w=150, h=300)|scale(s)|repeat(n, rotate(10)|scale(scale_factor))\n\n\ninteract(magic_ellipse, \n         scale_factor=FloatSlider(value=0.9, min=0.6, max=1.0, step=0.01),\n        n=IntSlider(value=100, min=1, max=150),\n        s=FloatSlider(value=0.20, min=0.01, max=1.00, step=0.01),)\n\n\n\n\n&lt;function __main__.magic_ellipse(scale_factor, n, s)&gt;\n\n\n\nnames = [\"Alice\", \"Bob\", \"Carol\", \"Dave\"]\n\n\nfor name in names:\n    print(\"Hello\", name)\n\nHello Alice\nHello Bob\nHello Carol\nHello Dave\n\n\n\nnames.append(\"Elly\")\n\n\nnames\n\n['Alice', 'Bob', 'Carol', 'Dave', 'Elly']\n\n\n\nnumbers = [1, 2, 3, 4, 5]\n\n\nresult = []\nfor n in numbers:\n    result.append(n*n)\n\n\nresult\n\n[1, 4, 9, 16, 25]\n\n\n\n[n*n for n in numbers]\n\n[1, 4, 9, 16, 25]\n\n\n\ncircles = [circle(r=r) for r in range(10, 100, 10)]\n\n\ncombine(circles)\n\n\n\n\n\nrandom(42)\n\n29.29376088736861\n\n\n\ndef random_circles(r, n):\n    shapes = [circle(r=random(r)) for i in range(n)]\n    return combine(shapes)\n\n\nrandom_circles(150, 30)"
  },
  {
    "objectID": "joy.html#concentric-circles",
    "href": "joy.html#concentric-circles",
    "title": "2  Joy of Programming",
    "section": "4.1 Concentric Circles",
    "text": "4.1 Concentric Circles\n\nradius = 100\nn=4\n\n\ncircle(r=100)+circle(r=90)+circle(r=80)+circle(r=70)\n\n\n\n\n\ncircle(r=100)+circle(r=75)+circle(r=50)+circle(r=25)\n\n\n\n\n\ncircle(r=100)+circle(r=80)+circle(r=60)+circle(r=40)+circle(r=20)\n\n\n\n\n\nradius = 100\nn=4\n\ndelta = radius/n\n\n\ndelta\n\n25.0\n\n\n\n[i*delta for i in range(1, n+1)]\n\n[25.0, 50.0, 75.0, 100.0]\n\n\n\ncircles = [circle(r = i*delta) for i in range(1, n+1)]\n\n\ncircles\n\n[&lt;circle {'cx': 0, 'cy': 0, 'r': 25.0}&gt;,\n &lt;circle {'cx': 0, 'cy': 0, 'r': 50.0}&gt;,\n &lt;circle {'cx': 0, 'cy': 0, 'r': 75.0}&gt;,\n &lt;circle {'cx': 0, 'cy': 0, 'r': 100.0}&gt;]\n\n\n\ncircles[3]\n\n\n\n\n\ncombine(circles)\n\n\n\n\n\ndef concentric_circles(radius, n):\n    delta = radius/n\n    circles = [circle(r=i*delta) for i in range(1, n+1)]\n    return combine(circles)\n\n\nconcentric_circles(100, 5)\n\n\n\n\n\nconcentric_circles(10, 5)\n\n\n\n\n\nconcentric_circles(100, 20)"
  },
  {
    "objectID": "joy.html#a-row-of-shapes",
    "href": "joy.html#a-row-of-shapes",
    "title": "2  Joy of Programming",
    "section": "4.2 A Row of Shapes",
    "text": "4.2 A Row of Shapes\n\ns1=circle()\ns2=rectangle()\n\n\ns1+s2\n\n\n\n\n\na=s1|scale(0.5)|translate(x=-100)\n\nb=s2|scale(0.5)|translate(x=100)\n\na+b\n\n\n\n\n\ns1=concentric_circles(150, 1)\ns2=concentric_circles(150, 2)\ns3=concentric_circles(150, 3)\ns4=concentric_circles(150, 4)\n\n\na=s1|scale(1/3)|translate(x=-100)\nb=s2|scale(1/3)\nc=s3|scale(1/3)|translate(x=100)\n\na+b+c\n\n\n\n\n\ndx = 300/4\na=s1|scale(1/4)|translate(x=0)\nb=s2|scale(1/4)|translate(x=dx)\nc=s3|scale(1/4)|translate(x=2*dx)\nd=s4|scale(1/4)|translate(x=3*dx)\n\nshape = a+b+c+d\n\nshape|translate(x=-150+dx/2)\n\n\n\n\n\ndef row(shapes):\n    n=len(shapes)\n    dx=300/n\n    offset=-150 + dx/2\n    new_shapes=[shapes[i]|scale(1/n)|translate(x=dx*i) for i in range(n)]\n    return combine(new_shapes)|translate(x=offset)\n\n\nrow([s1, s2])\n\n\n\n\n\nrow([concentric_circles(150, 10), concentric_circles(150, 4)])\n\n\n\n\n\nrow([concentric_circles(150, 1),\n     concentric_circles(150, 2),\n     concentric_circles(150, 3),\n     concentric_circles(150, 4), \n     concentric_circles(150, 5)])\n\n\n\n\n\ndef row_of_concentric_circles(n):\n    shapes=[concentric_circles(150, n-i) for i in range(n)]\n    return row(shapes)\n\n\nrow_of_concentric_circles(5)\n\n\n\n\n\n[i+1 for i in range(5)]\n\n[1, 2, 3, 4, 5]\n\n\n\n[5-i for i in range(5)]\n\n[5, 4, 3, 2, 1]"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]